---
title: "Hands-on Exercise 1.1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and tidyverse packages into R environment.

```{r}
pacman::p_load(sf,tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial",layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial",layer = "cyclingPath")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

Take note that the data frame is in **wgs84** coordinates system while the above two shapefiles are in SVY21 coordinates system.

## Checking the Content of A Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

This prints the basic information of the feature class.

### Working with glimpse()

```{r}
glimpse(mpsz)
```

This reveals the data type of each field. Most of the fields are in **double-precision values**.

### Working with head()

```{r}
head(mpsz, n=5)
```

This reveals the complete information of a featured object with the number of records specified by "n".

## Plotting the Geospatial Data

```{r}
plot(mpsz,max.plot = 15)
```

Default to print the first 9 maps, use "max.plot" to display the remaining.

```{r}
plot(st_geometry(mpsz))
```

Use this to only show the geometry.

```{r}
plot(mpsz["PLN_AREA_N"])
```

Use the above code chunk to plot the sf object by using a specific attribute.

\*plot() is meant for plotting the geospatial object for a quick look. for high cartographic quality plot, other R package such as tmap should be used.

## Working with Projection (Projection Transformation)

### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

This code shows the coordinate system of the data frame. Notice there the EPSG code is 9001 and not 3414 as the correct code for SVY21.

To assign the correct EPSG code to mpsz data frame, use the below code chunk.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool,
                              crs=3414)

st_crs(preschool3414)
```

## Importing and Converting an Aspatial Data

Aspatial data is not a geospatial data, but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

### Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

Data frame above consists of 4252 rows and 16 columns. Two useful fields we are going to use are latitude and longitude. Note that they are in decimal degree format, we will assume that the data is in **wgs84** Geographic Coordinate System.

## Creating a simple feature data frame from an aspatial data frame

```{r}
st_as_sf(listings,
         coords = c("longitude","latitude"),
         crs = 4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
