---
title: "Hands-on Exercise 1.1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and tidyverse packages into R environment.

```{r}
pacman::p_load(sf,tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial",layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial",layer = "cyclingPath")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

Take note that the data frame is in **wgs84** coordinates system while the above two shapefiles are in SVY21 coordinates system.

## Checking the Content of A Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

This prints the basic information of the feature class.

### Working with glimpse()

```{r}
glimpse(mpsz)
```

This reveals the data type of each field. Most of the fields are in **double-precision values**.

### Working with head()

```{r}
head(mpsz, n=5)
```

This reveals the complete information of a featured object with the number of records specified by "n".

## Plotting the Geospatial Data

```{r}
plot(mpsz,max.plot = 15)
```

Default to print the first 9 maps, use "max.plot" to display the remaining.

```{r}
plot(st_geometry(mpsz))
```

Use this to only show the geometry.

```{r}
plot(mpsz["PLN_AREA_N"])
```

Use the above code chunk to plot the sf object by using a specific attribute.

\*plot() is meant for plotting the geospatial object for a quick look. for high cartographic quality plot, other R package such as tmap should be used.

## Working with Projection (Projection Transformation)

### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

This code shows the coordinate system of the data frame. Notice there the EPSG code is 9001 and not 3414 as the correct code for SVY21.

To assign the correct EPSG code to mpsz data frame, use the below code chunk.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool,
                              crs=3414)

st_crs(preschool3414)
```

## Importing and Converting an Aspatial Data

Aspatial data is not a geospatial data, but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

### Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

Data frame above consists of 4252 rows and 16 columns. Two useful fields we are going to use are latitude and longitude. Note that they are in decimal degree format, we will assume that the data is in **wgs84** Geographic Coordinate System.

### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings,
         coords = c("longitude","latitude"),
         crs = 4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. One can seach for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   %\>% is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

New column *geometry* has been added to the data frame.

## Geoprocessing with sf package

### Buffering

The scenario:
The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html)of sf package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                            dist = 5,nQuadSegs = 30)
```

Followed by calculating the buffers as shown in the code chunk below

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html)*.* Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414,preschool3414))
```

\*not to confuse with [*st_inersection()*](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

```{r}
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414,1,`PreSch Count`)
```

above code shows the planning subzone with the most number of pre-school.

The scenario:

Calculate the density of pre-school by planning subzone.

The solution:

Firstly, find the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, compute the density.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density`=`PreSch Count`/Area *1000000)
```

## Explorotary Data Analysis (EDA)

### Histogram

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414,
       aes(x=as.numeric(`PreSch Density`)))+
  geom_histogram(bins = 20,
                 colour="black",
                 fill="light blue")+
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle = "There are many planning subzones with a single pre-school, on the other hand, \nthere are two planning subzones with at least 20 pre-schools",
       x= "Pre-school density (per km sq)",
       y= "Frequency")
```

### Scatterplot

```{r}
ggplot(data=mpsz3414,
       aes(y= `PreSch Count`,
         x=as.numeric(`PreSch Density`)))+
  geom_point(colour="black",
             fill="light blue")+
  xlim(0,40)+
  ylim(0,40)+
  labs(title = "",
       x= "Pre-school density (per km sq)",
       y= "Frequency")
```
