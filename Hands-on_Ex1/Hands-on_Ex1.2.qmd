---
title: "Hands-on_Ex1.2: Choropleth Mapping with R"
editor: visual
---

## Overview

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colours. E.g., a social scientist may need o use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

## Getting Started

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## Importing data into R

```{r}
mpsz <- st_read(dsn = "data/geospatial",layer = "MP14_SUBZONE_WEB_PL")
```

## Importing Attribute Data into R

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## Data Preparation

### data wrangling

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE`= rowSums(.[7:11])+
rowSums(.[13:15])) %>%
mutate(`AGED` = rowSums(.[16:21])) %>%
mutate(`TOTAL` = rowSums(.[3:21])) %>%
mutate(`DEPENDENCY` = (`YOUNG`+`AGED`)
       /`ECONOMY ACTIVE`) %>%
  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)
```

### Joining the attribute data and geospatial data

Converting values in PA and SZ fields to uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA,SZ),
            .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
mpsz_pop2020 <- left_join(mpsz,popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Chroropleth Mapping Geospatial Data Using tmap

### Plotting a choropleth map quickly by using *qtm()*

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

Things to learn from the code chunk above:

-   *tmap_mode()* with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   *fill* argument is used to map the attribute (i.e DEPENDENCY)

### Creating a choropleth map by using tmap's elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          title = "Dependency ratio")+
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE)+
  tm_borders(alpha = 0.5)+
  tm_compass(type = "8star", size =2)+
  tm_scale_bar()+
  tm_grid(alpha = 0.2)+
  tm_credits("Source: Planning Subzone boundary from Urban Redevelopment Authority (URA)\n and Population data from Department of Statistics DOS",
             position = c("left","bottom"))
```

#### Drawing a base map

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons()
```

#### Drawing a choropleth map using tm_pologons() by assigning the target variable to *tm_polygons()*

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

#### Drawing a choropleth map using *tm_fill()* and *tm_border()*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")+
  tm_borders(lwd = 0.1, alpha =0.5)
```

Notice that light-gray border lines have been added on the choropleth map.

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   col = border colour,

-   lwd = border line width. The default is 1, and

-   lty = border line type. The default is "solid"

### Data classification methods of tmap

***tmap*** provides a total ten data classfication methods, namely: *fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.*

To define a data classification method, the style argument of *tm_fill()* or *tm_polygons()* will be used.

#### Plotting choropleth maps with built-in classification methods

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks")+
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal")+
  tm_borders(alpha = 0.5)
```

#### Plotting choropleth map with customer break
