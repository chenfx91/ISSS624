[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#getting-started",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data in shapefile format\n\nmpsz <- st_read(dsn = \"data/geospatial\",layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting polyline feature data in shapefile format\n\ncyclingpath = st_read(dsn = \"data/geospatial\",layer = \"cyclingPath\")\n\nReading layer `cyclingPath' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nTake note that the data frame is in wgs84 coordinates system while the above two shapefiles are in SVY21 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Checking the Content of A Simple Feature Data Frame",
    "text": "Checking the Content of A Simple Feature Data Frame\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nThis prints the basic information of the feature class.\n\n\nWorking with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThis reveals the data type of each field. Most of the fields are in double-precision values.\n\n\nWorking with head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nThis reveals the complete information of a featured object with the number of records specified by “n”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\n\nplot(mpsz,max.plot = 15)\n\n\n\n\nDefault to print the first 9 maps, use “max.plot” to display the remaining.\n\nplot(st_geometry(mpsz))\n\n\n\n\nUse this to only show the geometry.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\nUse the above code chunk to plot the sf object by using a specific attribute.\n*plot() is meant for plotting the geospatial object for a quick look. for high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#working-with-projection-projection-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#working-with-projection-projection-transformation",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Working with Projection (Projection Transformation)",
    "text": "Working with Projection (Projection Transformation)\n\nAssigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThis code shows the coordinate system of the data frame. Notice there the EPSG code is 9001 and not 3414 as the correct code for SVY21.\nTo assign the correct EPSG code to mpsz data frame, use the below code chunk.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\n\npreschool3414 <- st_transform(preschool,\n                              crs=3414)\n\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting an Aspatial Data",
    "text": "Importing and Converting an Aspatial Data\nAspatial data is not a geospatial data, but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\nImporting the aspatial data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nData frame above consists of 4252 rows and 16 columns. Two useful fields we are going to use are latitude and longitude. Note that they are in decimal degree format, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings,\n         coords = c(\"longitude\",\"latitude\"),\n         crs = 4326) %>%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. One can seach for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nNew column geometry has been added to the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\n\nBuffering\nThe scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer()of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,nQuadSegs = 30)\n\nFollowed by calculating the buffers as shown in the code chunk below\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414,preschool3414))\n\n*not to confuse with st_inersection().\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\n\ntop_n(mpsz3414,1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nabove code shows the planning subzone with the most number of pre-school.\nThe scenario:\nCalculate the density of pre-school by planning subzone.\nThe solution:\nFirstly, find the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, compute the density.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density`=`PreSch Count`/Area *1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#explorotary-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.1.html#explorotary-data-analysis-eda",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Explorotary Data Analysis (EDA)",
    "text": "Explorotary Data Analysis (EDA)\n\nHistogram\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins = 20,\n                 colour=\"black\",\n                 fill=\"light blue\")+\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle = \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are two planning subzones with at least 20 pre-schools\",\n       x= \"Pre-school density (per km sq)\",\n       y= \"Frequency\")\n\n\n\n\n\n\nScatterplot\n\nggplot(data=mpsz3414,\n       aes(y= `PreSch Count`,\n         x=as.numeric(`PreSch Density`)))+\n  geom_point(colour=\"black\",\n             fill=\"light blue\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title = \"\",\n       x= \"Pre-school density (per km sq)\",\n       y= \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colours. E.g., a social scientist may need o use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#getting-started",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#importing-data-into-r",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "Importing data into R",
    "text": "Importing data into R\n\nmpsz <- st_read(dsn = \"data/geospatial\",layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#importing-attribute-data-into-r",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "Importing Attribute Data into R",
    "text": "Importing Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#data-preparation",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "Data Preparation",
    "text": "Data Preparation\n\ndata wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG,\n              values_from = POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE`= rowSums(.[7:11])+\nrowSums(.[13:15])) %>%\nmutate(`AGED` = rowSums(.[16:21])) %>%\nmutate(`TOTAL` = rowSums(.[3:21])) %>%\nmutate(`DEPENDENCY` = (`YOUNG`+`AGED`)\n       /`ECONOMY ACTIVE`) %>%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nConverting values in PA and SZ fields to uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\nmpsz_pop2020 <- left_join(mpsz,popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#chroropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.2.html#chroropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on_Ex1.2: Choropleth Mapping with R",
    "section": "Chroropleth Mapping Geospatial Data Using tmap",
    "text": "Chroropleth Mapping Geospatial Data Using tmap\n\nPlotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e DEPENDENCY)\n\n\n\nCreating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\", size =2)+\n  tm_scale_bar()+\n  tm_grid(alpha = 0.2)+\n  tm_credits(\"Source: Planning Subzone boundary from Urban Redevelopment Authority (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\",\"bottom\"))\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_pologons() by assigning the target variable to tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha =0.5)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”\n\n\n\n\nData classification methods of tmap\ntmap provides a total ten data classfication methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with customer break\nBreakpoints can be set explicitly by means of the breaks argument to the tm_fill(). In tmap, the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nCheck the variable statistics first.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))+\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColour Scheme\n\nUsing ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\nChange colours. “-” to reverse the colour scheme.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait =TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\", size = 2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1, alpha = 0.2)+\n  tm_credits(\"Source: Planning Subzone boundary from Urban Redevelopment Authority (URA) \\n and Population data from Department of Statistics (DOS)\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nSmall multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = c(\"equal\",\"quantile\"),\n          palette = list(\"Blues\",\"Greens\"))+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\nMultiple small choropleth maps are created.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\",\n            free.coords = TRUE,\n            drop.shapes = TRUE)+\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple standalone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Greens\")\n\nagedmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nThe analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be \"is there sign of spatial clustering?\". And, if the answer for this question is yes, then our next question will be \"where are these clusters?\"\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\nThe study area and data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.\n\n\n\nSetting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting the Data into R Environment",
    "text": "Getting the Data into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nJoining, by = \"County\"\n\n\n\n\nVisualising Regional Development Indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a \"queen\" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style=\"W\" option for simplicity's sake but note that other more robust options are available, notably style=\"B\".\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran's I statistics testing by using moran.test() of spdep.\n\n\nMaron’s I test\nThe code chunk below performs Moran's I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran's I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nGeary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary's C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The plot() of base Graph is then used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran's I\nTo compute local Moran's I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran's I of GDPPC2012 at the county level.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran's I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran's I\nBefore mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nMapping local Moran's I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran's I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nMapping local Moran's I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran's I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran's I values and p-values\nFor effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)    \n\nThis is follow by centering the local Moran's around the mean.\n\nLM_I <- localMI[,1] - mean(localMI[,1])   \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4   \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\nPlotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes \"gstari\" set to TRUE or FALSE, \"call\" set to the function call, and class \"localG\".\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nThe analytical question\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\nThe study area and data\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n\nSetting the analytical tools\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-preparation",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Data Import and Preparation",
    "text": "Data Import and Preparation\n\nImport shapefile into r environment\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\chenfx91\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham's tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it's fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nImporting aspatial data into R environment\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\nDerive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>% #mutate can give us a new variable\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\nEDA using choropleth map\n\nJoining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf <- left_join(shan_sf, #left file\n                     ict_derived, #right file, follow the sequence\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\")) #this is redundant\n\nwrite_rds(shan_sf,\"data/rds/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\nPreparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\") \n\n\n\n#if the eclipse look like a line > strong correlation, if look like a cirle > weake correlation\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\nExtracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>% #shan_sf is a geometry, need to drop off the geometry column\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\") #all the columns must be the clutering variables. do not add extra variables\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\" \nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict <- select(cluster_vars, c(2:6)) #remove TS.x so that the table only left with the numbers. this is important to do for data preparation.\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nData Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\nMin-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\nZ-score standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\nVisualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large.\n\n\nComputing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D') #hclust is a base r function\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6) #cex to avoid overlapping of wordings. cex scaled down the plot to 60%\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n} #method is the hierchical clustering, this is a functional programming\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward's method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward's method will be used.\n\n\nDetermining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\nGap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50,     nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\nInterpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt's also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, #rect to set a rectangle\n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactiv cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\nMapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=6)) #k=6, we determined earlier\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`) \n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands-on Exercise 3: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatially Constrained Clustering - SKATER approach",
    "text": "Spatially Constrained Clustering - SKATER approach\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\nConverting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\nComputing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\nComputing minimum spanning tree\n\nCalculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst <- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 <- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\nVisualising the Clusters in Choropleth Map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "This hands-on exercise, we will be learning how to compute spatial weights using R."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospitial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospitial-data",
    "title": "In-class Exercise 1",
    "section": "Importing Geospitial Data",
    "text": "Importing Geospitial Data\n\nImporting polygon features\nThis code chunk will import ESRI shapefile into R\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                layer = \"hunan\")\n\nReading layer `hunan' from data source \n  `C:\\chenfx91\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting attribute data in csv\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPerforming relational join\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\n\nbasemap <- tm_shape(hunan)+\n  tm_polygons()+\n  tm_text(\"NAME_3\",size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)\n\n\n\n\n\nComputing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a \"queen\" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nComputing (QUEEN) contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbours\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.\n\n\nVisualising Contiguity Weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours map\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "Computing Distance Based Neighbours",
    "text": "Computing Distance Based Neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\nPlotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style=\"W\" option for simplicity's sake but note that other more robust options are available, notably style=\"B\".\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon's four neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q,glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\nSpatial lag with row-standardized weights\nFinally, we'll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q,hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "title": "In-class Exercise 2",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nTwo geospatial data sets will be used, they are:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\nImporting water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga <- write_rds(wp,\n                    \"geodata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\chenfx91\\ISSS624\\In-class_Ex\\In-class_Ex2\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "In-class Exercise 2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle,\"unknown\"))\n\n\n\nEDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "title": "In-class Exercise 2",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\nExtracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\nExtracting non-functional water point\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\n\nExtracting water point with unknown class\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "In-class Exercise 2",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "title": "In-class Exercise 2",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "title": "In-class Exercise 2",
    "section": "Visualising the spatial dsitribution of water points",
    "text": "Visualising the spatial dsitribution of water points\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "title": "In-class Exercise 3",
    "section": "Spatially Constrained Clustering: ClustGeo Method",
    "text": "Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\nWard-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist().\n\nMapping the clusters formed\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\nSpatially Constrainned Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chun below.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can not plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Analytics Applications!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "",
    "text": "PHOTO: google.com/search"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#overview",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Overview",
    "text": "Overview\n\nBackground\nWater is a scarce resource especially for developing countries and Nigeria is one of them. According to an article from DowntoEarth.org in 2022, more than 60% of the Nigeria’s population do not have access to potable water, and people live in urban slums or rural parts of the countries both have difficulties in getting proper supply of water.\nIn order to understand the severity of the situation, we want to deep dive into the sub-district levels of data (AMD2) and visualise the spatial patterns of the water points, with focus on the non-functional ones, in Nigeria.\n\n\nThe analytical question\nAs we know that Nigeria have serious issues with their water supply, we need to answer the below questions for this analysis on the non-functional water points:\n\nAre water points evenly distributed in Nigeria? if the answer is No. then,\nIs there sign of spatial clustering? if the answer is Yes. then,\nWhere are these clusters?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf: used for importing, managing, and processing geospatial data\ntidyverse: a collection of packages for data science tasks\ntmap: used for creating thematic maps, such as choropleth and bubble maps\nspdep: used to compute spatial weights, global and local spatial autocorrelation statistics, and\nfunModeling: used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#importing-geospatial-data",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nTwo geospatial data sets will be used, they are:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\nImporting water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga <- write_rds(wp,\n                    \"geodata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\chenfx91\\ISSS624\\Take-home_Ex\\Take-home_Ex1\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle,\"unknown\"))\n\n\n\nEDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\nExtracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\nExtracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nFrom the above bar charts, we can see there are shocking amount of non-functional water points (33%) across Nigeria.\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\n\nExtracting water point with unknown class\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\nNote that there are three Projected Coordinate Systems of Nigeria, namely, EPSG: 26391, 26392, and 26303. We will need to check the current source data on its Coordinate system and do the transformation if necessary, this could be achieve from the code chunk below.\n\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nFrom the print above, we can see that the EPSG code is wrong (currently is 4326), we need to transform it to the correct code to the nga_wp data frame, st_transform() of sf package is used as shown in the code chunk below.\n\nnga_wp <- st_transform(nga_wp,\n                       crs = 26391)\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)\n\n\n\n\nFrom the above graphs, we can see that in the northern part of the country, we can see more functional water points while in the central and east sides, there are more non-functional water points. However, it is not enough to identify which areas are the most serious and requires most immediate attentions and actions. Below spatial analysis is conducted to find out such areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\n\nComputing Contiguity Spatial Weights\n\nwp_wm_q <- poly2nb(nga_wp,\n                    queen = TRUE)\nsummary(wp_wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report above shows that there are 774 area units in Nigeria. The most connected area unit has 14 neighbours. There are two area units with only one neighbours. There is 1 regoin with no links.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\nFrom the above, we know that there is one area has no neighbours, hence, the below code chunk includes codes to exclude the region with no links.\n\nwp_rswm_q <- nb2listw(wp_wm_q,\n                      style = \"W\",\n                      zero.policy = TRUE)\nprint(nb2listw(neighbours = wp_wm_q, zero.policy = TRUE), zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\nget.ZeroPolicyOption()\n\n[1] FALSE\n\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE\n\nget.ZeroPolicyOption()\n\n[1] TRUE\n\nwp_rswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\n\n\nMaron’s I test\nThe Null Hypothesis:\nThe non-functional water points are randomly distributed in Nigeria\n\nmoran.test(nga_wp$`wpt non-functional`, \n           listw=wp_rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: wp_rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 20.043, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.433932927      -0.001295337       0.000471516 \n\n\nFrom the p-value <2.2e-16, we reject the null hyphothesis at 95% significant level, and conclude that there is spatial pattern of non-functional water points in Nigeria. From the Moran I (Z value) is positive, we can conclude that there are clusters of non-functional water points in Nigeria.\n\nComputing Monte Carlo Moran’s I\nConducting Monte Carlo Stimulation to further confirm on Moran’s I test.\n\nset.seed(1234)\nwp_nf_bperm= moran.mc(nga_wp$`wpt non-functional`, \n                listw=wp_rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nwp_nf_bperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: wp_rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43393, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the above simulation, p-value = 0.001, we can confirm that the null hyphothesis is rejected at 95% significant level.\n\n\nVisualising Monte Carlo Moran’s I\nThe code chunk below shows the distribution of the statistical values of the simulated Moran’s I test as a histogram.\n\nmean(wp_nf_bperm$res[1:999])\n\n[1] -0.0005316305\n\n\n\nvar(wp_nf_bperm$res[1:999])\n\n[1] 0.0004973974\n\n\n\nsummary(wp_nf_bperm$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0651127 -0.0150421 -0.0020783 -0.0005316  0.0143726  0.0798599 \n\n\n\nhist(wp_nf_bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nFrom the histogram output above, we can see that the distribution follows a normal distribution with an outlier."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatial-correlogram",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatial-correlogram",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when we increase the distance (lag) between them.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of non-functional water points in Nigeria. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr_wp <- sp.correlogram(wp_wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr_wp)\n\n\n\n\n\nprint(MI_corr_wp)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3393e-01 -1.2953e-03  4.7152e-04          20.0433       < 2.2e-16\n2 (773)  2.6647e-01 -1.2953e-03  2.0206e-04          18.8374       < 2.2e-16\n3 (773)  1.9507e-01 -1.2953e-03  1.2189e-04          17.7863       < 2.2e-16\n4 (773)  1.4019e-01 -1.2953e-03  8.7589e-05          15.1181       < 2.2e-16\n5 (773)  6.3735e-02 -1.2953e-03  6.8779e-05           7.8413       4.459e-15\n6 (773)  2.1698e-02 -1.2953e-03  5.7380e-05           3.0354        0.002402\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the above correlogram, we can see that with the lags increases, Moran’s I value is more and more approaching to 0, and the observations will be more randomly over the study area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. In this section, we will apply LISA by using local Moran’s I to detect cluster and/or outlier for the non-functional water points in Nigeria.\n\nComputing local Moran’s I\n\nfips_wp <- order(nga_wp$ADM2_EN)\nlocalMI_wp <- localmoran(nga_wp$`wpt non-functional`, wp_rswm_q)\nhead(localMI_wp)\n\n           Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.32365786 -9.995243e-04 1.924638e-01 -0.73547576     0.46204980\n2  0.07000542 -4.092463e-05 1.053077e-02  0.68258288     0.49487045\n3  1.25819985 -1.627684e-03 4.181728e-01  1.94819847     0.05139122\n4 -0.03537489 -5.427505e-05 5.954304e-03 -0.45773361     0.64714384\n5  0.01201533 -2.590965e-04 3.988998e-02  0.06145673     0.95099547\n6  0.00768085 -1.538445e-07 1.687859e-05  1.86960486     0.06153871\n\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\ntable(duplicated(nga_wp$ADM2_EN))\n\n\nFALSE  TRUE \n  768     6 \n\nprintCoefmat(data.frame(\n  localMI_wp[fips_wp,], \n  row.names=nga_wp$ADM2_PCODE[fips_wp]),\n  check.names=FALSE)\n\n                  Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nNG001001 -3.2366e-01 -9.9952e-04  1.9246e-01 -7.3548e-01         0.4620\nNG001002  7.0005e-02 -4.0925e-05  1.0531e-02  6.8258e-01         0.4949\nNG008001  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00         0.0514\nNG015001 -3.5375e-02 -5.4275e-05  5.9543e-03 -4.5773e-01         0.6471\nNG003001  1.2015e-02 -2.5910e-04  3.9890e-02  6.1457e-02         0.9510\nNG011001  7.6808e-03 -1.5384e-07  1.6879e-05  1.8696e+00         0.0615\nNG028001  2.3716e-01 -6.6542e-04  8.5226e-02  8.1464e-01         0.4153\nNG028002  1.3499e-01 -6.9507e-05  1.3396e-02  1.1669e+00         0.2433\nNG009001  5.8469e-01 -3.9167e-04  6.0293e-02  2.3828e+00         0.0172\nNG017001  1.9145e-01 -2.2881e-04  2.5098e-02  1.2099e+00         0.2263\nNG033001  6.7485e-01 -7.6926e-04  8.4332e-02  2.3265e+00         0.0200\nNG015002  1.3484e-01 -9.2780e-04  8.8869e-02  4.5543e-01         0.6488\nNG023001  1.6286e-02 -4.0925e-05  6.3021e-03  2.0567e-01         0.8370\nNG007001 -3.1655e-02 -2.9456e-05  2.8239e-03 -5.9514e-01         0.5518\nNG028003 -3.1637e-01 -1.0254e-02  1.1135e+00 -2.9010e-01         0.7717\nNG013001  6.8612e-02 -9.2780e-04  1.4275e-01  1.8406e-01         0.8540\nNG031001  2.4270e-02 -1.9868e-05  5.1126e-03  3.3971e-01         0.7341\nNG011002  5.8712e-01 -1.1792e-03  1.8138e-01  1.3814e+00         0.1672\nNG011003 -8.6368e-03 -8.6620e-05  1.1101e-02 -8.1152e-02         0.9353\nNG027001 -2.1125e-02 -1.8249e-05  2.8103e-03 -3.9815e-01         0.6905\nNG007002 -6.1300e-02 -1.4475e-04  2.2288e-02 -4.0963e-01         0.6821\nNG025001  2.8968e-01 -1.3297e-03  3.4172e-01  4.9782e-01         0.6186\nNG004001  8.3857e-01 -1.1920e-03  1.8334e-01  1.9612e+00         0.0499\nNG027002  1.5893e-03 -2.7477e-05  5.2960e-03  2.2217e-02         0.9823\nNG017002  1.3175e-01 -8.6620e-05  9.5025e-03  1.3525e+00         0.1762\nNG033002  8.0063e-01 -9.3914e-04  1.8085e-01  1.8849e+00         0.0594\nNG033003  8.4077e-01 -1.6277e-03  2.5025e-01  1.6840e+00         0.0922\nNG030001 -1.9940e-03 -1.2099e-02  1.3113e+00  8.8241e-03         0.9930\nNG030002  3.0859e-01 -2.2324e-04  2.4486e-02  1.9735e+00         0.0484\nNG013002  2.5468e-01 -3.1865e-04  3.0540e-02  1.4592e+00         0.1445\nNG023002  9.3035e-03 -6.3380e-06  8.1230e-04  3.2665e-01         0.7439\nNG025002  1.0902e+00 -1.5504e-03  3.9834e-01  1.7298e+00         0.0837\nNG020001  8.0526e-02 -1.9868e-05  2.5464e-03  1.5962e+00         0.1104\nNG009002  2.2617e-01 -2.7477e-05  3.0145e-03  4.1198e+00         0.0000\nNG031002 -1.7370e-01 -3.5422e-04  3.8849e-02 -8.7950e-01         0.3791\nNG016001  3.6215e+00 -1.7248e-02  1.6251e+00  2.8544e+00         0.0043\nNG012001 -9.7994e-02 -6.9507e-05  4.8271e-03 -1.4094e+00         0.1587\nNG029001  2.6132e+00 -5.7830e-03  6.3080e-01  3.2975e+00         0.0010\nNG029002  1.8731e+00 -1.5753e-02  2.9886e+00  1.0926e+00         0.2746\nNG029003  2.9695e+00 -3.9022e-03  7.4920e-01  3.4353e+00         0.0006\nNG029004  4.0806e+00 -1.3638e-02  2.0716e+00  2.8446e+00         0.0044\nNG009003  7.7463e-01 -8.2075e-03  1.5690e+00  6.2497e-01         0.5320\nNG033004  7.5445e-01 -1.3297e-03  3.4172e-01  1.2929e+00         0.1960\nNG029005 -9.4511e-02 -2.0041e-04  2.5680e-02 -5.8852e-01         0.5562\nNG029006 -4.0892e-01 -1.0618e-03  2.7294e-01 -7.8067e-01         0.4350\nNG026001  1.7264e-02 -1.8555e-06  3.5764e-04  9.1300e-01         0.3612\nNG020002 -6.0666e-01 -4.4019e-03  6.7490e-01 -7.3309e-01         0.4635\nNG022001  3.8136e-02 -1.0903e-05  2.1016e-03  8.3213e-01         0.4053\nNG025003 -2.6481e-01 -9.2780e-04  1.0170e-01 -8.2749e-01         0.4080\nNG005001 -3.6486e-01 -1.7389e-04  1.6668e-02 -2.8247e+00         0.0047\nNG025004  6.4059e-01 -1.0618e-03  1.0169e-01  2.0122e+00         0.0442\nNG004002  5.2295e-01 -6.1632e-04  7.8942e-02  1.8634e+00         0.0624\nNG004003  5.1817e-01 -5.6910e-04  5.4530e-02  2.2214e+00         0.0263\nNG004004  6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00         0.0139\nNG033005  7.4747e-01 -8.8063e-04  2.2641e-01  1.5727e+00         0.1158\nNG014001  5.8669e-01 -1.6277e-03  2.5025e-01  1.1760e+00         0.2396\nNG010001  9.1402e-01 -1.2599e-03  2.4254e-01  1.8585e+00         0.0631\nNG010002  7.1930e-01 -1.3297e-03  1.4569e-01  1.8880e+00         0.0590\nNG037001 -3.0961e-02 -5.2377e-04  8.0617e-02 -1.0720e-01         0.9146\nNG023003  3.2899e-03 -3.3373e-07  3.6614e-05  5.4375e-01         0.5866\nNG007003  7.1599e-02 -2.9126e-04  4.4841e-02  3.3949e-01         0.7342\nNG025005  1.1170e+00 -1.6277e-03  2.0827e-01  2.4512e+00         0.0142\nNG035001  5.9556e-01 -6.0715e-04  7.7767e-02  2.1378e+00         0.0325\nNG022002 -7.0312e-02 -2.9456e-05  2.8239e-03 -1.3226e+00         0.1860\nNG022003  4.0210e-02 -3.1865e-04  4.9056e-02  1.8298e-01         0.8548\nNG001003  9.0458e-02 -1.1259e-03  1.4414e-01  2.4123e-01         0.8094\nNG024001  6.6358e-02 -1.8555e-06  2.0357e-04  4.6511e+00         0.0000\nNG033006  9.9615e-01 -1.1259e-03  4.3469e-01  1.5126e+00         0.1304\nNG008002  9.5142e-01 -1.1259e-03  9.5720e-02  3.0788e+00         0.0021\nNG030003  1.5763e+00 -2.3901e-03  3.6719e-01  2.6053e+00         0.0092\nNG030004  1.3676e+00 -3.5471e-03  3.0082e-01  2.4999e+00         0.0124\nNG031003  9.2471e-02 -1.4925e-04  1.4307e-02  7.7435e-01         0.4387\nNG031004 -3.7128e-02 -8.3203e-05  1.0663e-02 -3.5875e-01         0.7198\nNG022004 -3.1518e-02 -1.2649e-04  1.6210e-02 -2.4656e-01         0.8052\nNG018001 -9.2317e-03 -1.9519e-04  2.1411e-02 -6.1757e-02         0.9508\nNG026002 -3.8035e-02 -2.3951e-06  2.2963e-04 -2.5098e+00         0.0121\nNG014002  7.1490e-01 -1.0618e-03  1.3594e-01  1.9419e+00         0.0522\nNG004005  8.4336e-01 -1.6277e-03  1.7829e-01  2.0012e+00         0.0454\nNG004006  7.2523e-01 -9.9952e-04  1.5377e-01  1.8520e+00         0.0640\nNG004007  5.3888e-01 -4.8031e-04  7.3931e-02  1.9837e+00         0.0473\nNG018002  3.4904e+00 -9.4838e-03  1.4466e+00  2.9099e+00         0.0036\nNG025006  1.1262e+00 -3.3198e-03  8.5145e-01  1.2241e+00         0.2209\nNG036001 -4.1318e-01 -3.9167e-04  7.5464e-02 -1.5026e+00         0.1329\nNG022005 -1.6794e-01 -5.4275e-05  8.3578e-03 -1.8364e+00         0.0663\nNG020003 -1.0457e-01 -3.8586e-05  4.2332e-03 -1.6066e+00         0.1081\nNG009005  0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\nNG021001  9.7051e-02 -1.4925e-04  1.9126e-02  7.0284e-01         0.4822\nNG037002  1.3239e-01 -1.1259e-03  1.4414e-01  3.5167e-01         0.7251\nNG016002  8.6819e-01 -5.3489e-03  5.8371e-01  1.1434e+00         0.2529\nNG035002  2.8316e-01 -1.6128e-03  1.3704e-01  7.6927e-01         0.4417\nNG008003  1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00         0.0244\nNG032001  1.5674e+00 -3.2090e-03  4.0996e-01  2.4530e+00         0.0142\nNG024002  1.5345e-02 -2.7477e-05  3.5215e-03  2.5904e-01         0.7956\nNG023004  6.5838e-03 -9.8783e-04  9.4613e-02  2.4616e-02         0.9804\nNG032002  7.6830e-02 -6.6449e-05  8.5158e-03  8.3329e-01         0.4047\nNG021002  1.0339e-01 -8.3203e-05  9.1276e-03  1.0831e+00         0.2788\nNG021003  1.3652e-02 -1.0184e-04  1.5681e-02  1.0983e-01         0.9125\nNG005002  1.1441e-01 -8.6620e-05  1.3338e-02  9.9137e-01         0.3215\nNG021004  1.7511e+00 -5.0690e-03  7.7665e-01  1.9927e+00         0.0463\nNG008004  2.3957e-01 -3.9905e-04  6.1428e-02  9.6821e-01         0.3329\nNG020004 -3.3289e-02 -9.9952e-04  1.5377e-01 -8.2343e-02         0.9344\nNG009006  1.3164e+00 -1.5358e-03  2.3615e-01  2.7122e+00         0.0067\nNG001004  4.0316e-01 -6.6542e-04  6.3753e-02  1.5994e+00         0.1097\nNG009007  1.8824e-01 -2.5316e-04  2.4265e-02  1.2100e+00         0.2263\nNG020005 -1.4448e-01 -1.0184e-04  1.3051e-02 -1.2638e+00         0.2063\nNG027003 -2.7746e-01 -1.2649e-04  4.8883e-02 -1.2544e+00         0.2097\nNG016003  2.5014e+00 -3.3198e-03  6.3776e-01  3.1364e+00         0.0017\nNG021005 -6.5757e-02 -1.2235e-04  1.5680e-02 -5.2416e-01         0.6002\nNG034001 -1.5657e-01 -3.5422e-04  4.5383e-02 -7.3329e-01         0.4634\nNG018003 -4.0714e-01 -7.5196e-03  9.5649e-01 -4.0861e-01         0.6828\nNG018004 -5.2572e-04 -5.6910e-04  5.4530e-02  1.8579e-04         0.9999\nNG019001  1.4369e+00 -5.3489e-03  4.0699e-01  2.2607e+00         0.0238\nNG022006 -3.8910e-01 -6.1632e-04  7.8942e-02 -1.3827e+00         0.1668\nNG037003  2.8350e-01 -3.9905e-04  5.1123e-02  1.2556e+00         0.2093\nNG008005  1.1070e+00 -1.6277e-03  1.5580e-01  2.8086e+00         0.0050\nNG034002 -3.9128e-03 -2.7477e-05  4.2313e-03 -5.9730e-02         0.9524\nNG005003 -2.2763e-01 -2.2881e-04  5.8867e-02 -9.3725e-01         0.3486\nNG009008  2.6518e+00 -7.0234e-03  1.0740e+00  2.5656e+00         0.0103\nNG032003  5.0676e-01 -2.2324e-04  2.8605e-02  2.9976e+00         0.0027\nNG030005  3.1906e-01 -8.3203e-05  1.6036e-02  2.5203e+00         0.0117\nNG010003  6.1173e-01 -1.4014e-03  2.1550e-01  1.3208e+00         0.1866\nNG033007  1.0868e+00 -1.6277e-03  2.0827e-01  2.3850e+00         0.0171\nNG027004 -1.6043e-01 -2.5910e-04  2.2046e-02 -1.0787e+00         0.2807\nNG030006  1.1122e+00 -1.7723e-03  2.2675e-01  2.3395e+00         0.0193\nNG027005 -2.0497e-02 -1.4925e-04  1.9126e-02 -1.4713e-01         0.8830\nNG006001  2.9959e-01 -6.1632e-04  2.3806e-01  6.1529e-01         0.5384\nNG018005  4.5026e-03 -3.3373e-07  5.1394e-05  6.2812e-01         0.5299\nNG037004 -3.1431e-02 -2.5910e-04  3.9890e-02 -1.5607e-01         0.8760\nNG037005  2.0237e-01 -8.8063e-04  1.1277e-01  6.0526e-01         0.5450\nNG020006  3.6342e-02 -1.2649e-04  1.3876e-02  3.0959e-01         0.7569\nNG022007  8.8429e-01 -2.5835e-03  3.9683e-01  1.4079e+00         0.1592\nNG036002  4.7994e-01 -5.2377e-04  5.0189e-02  2.1447e+00         0.0320\nNG007004  5.0409e-01 -7.5901e-04  9.7204e-02  1.6193e+00         0.1054\nNG010004  8.0259e-01 -1.4014e-03  2.6973e-01  1.5480e+00         0.1216\nNG015003  3.2095e-01 -2.5316e-04  4.8784e-02  1.4543e+00         0.1459\nNG009010 -5.6408e-01 -2.2881e-04  5.8867e-02 -2.3240e+00         0.0201\nNG009009  1.0900e-01 -3.8586e-05  7.4371e-03  1.2644e+00         0.2061\nNG027006  1.4615e-02 -2.3951e-06  1.8538e-03  3.3950e-01         0.7342\nNG021006  5.5125e-02 -5.1577e-05  6.6100e-03  6.7866e-01         0.4974\nNG008006  9.5921e-01 -1.0618e-03  2.7294e-01  1.8380e+00         0.0661\nNG019002 -9.5427e-01 -1.3297e-03  1.2731e-01 -2.6707e+00         0.0076\nNG020007 -1.5215e-01 -1.2235e-04  2.3581e-02 -9.8999e-01         0.3222\nNG036003  1.0215e+00 -1.4014e-03  2.1550e-01  2.2035e+00         0.0276\nNG005004  1.7310e-02 -1.8249e-05  2.3389e-03  3.5830e-01         0.7201\nNG020008  5.8823e-01 -8.6966e-04  1.3381e-01  1.6104e+00         0.1073\nNG008007  1.2015e+00 -1.6277e-03  1.5580e-01  3.0481e+00         0.0023\nNG021007  1.9828e-01 -1.1259e-03  1.2339e-01  5.6767e-01         0.5703\nNG022008  6.0353e-01 -5.2080e-03  9.9861e-01  6.0916e-01         0.5424\nNG021008  2.5690e-02 -1.8555e-06  3.5764e-04  1.3585e+00         0.1743\nNG034003  8.6937e-02 -1.2649e-04  1.3876e-02  7.3910e-01         0.4598\nNG021009 -2.5042e-01 -2.9126e-04  3.7319e-02 -1.2948e+00         0.1954\nNG005005  5.2452e-03 -1.0903e-05  1.1962e-03  1.5197e-01         0.8792\nNG005006  2.4361e-01 -3.6124e-04  1.3957e-01  6.5305e-01         0.5137\nNG021010  4.0067e-01 -8.1339e-04  2.0914e-01  8.7790e-01         0.3800\nNG020009 -1.3898e-01 -4.3100e-04  5.5216e-02 -5.8963e-01         0.5554\nNG020010  5.3574e-01 -1.0618e-03  1.3594e-01  1.4559e+00         0.1454\nNG033008  8.9537e-01 -1.4749e-03  1.4120e-01  2.3867e+00         0.0170\nNG023005  1.9339e-02 -8.1339e-04  1.5665e-01  5.0915e-02         0.9594\nNG002001  7.6650e-01 -1.4014e-03  1.5353e-01  1.9598e+00         0.0500\nNG008008  1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00         0.0058\nNG020011 -8.4890e-03 -1.0903e-05  1.3974e-03 -2.2680e-01         0.8206\nNG026003 -6.3606e-02 -5.4275e-05  4.6190e-03 -9.3509e-01         0.3497\nNG035003  1.1977e+00 -1.6128e-03  1.5437e-01  3.0525e+00         0.0023\nNG016004  2.0702e+00 -5.2080e-03  5.6841e-01  2.7528e+00         0.0059\nNG004008  5.5459e-01 -6.1632e-04  9.4853e-02  1.8027e+00         0.0714\nNG018006 -2.2400e-01 -1.4749e-03  1.4120e-01 -5.9220e-01         0.5537\nNG021011 -2.0141e-01 -2.0041e-04  2.1983e-02 -1.3571e+00         0.1748\nNG021012 -6.0268e-02 -6.0715e-04  7.7767e-02 -2.1394e-01         0.8306\nNG003002  1.3772e-01 -3.9905e-04  6.1428e-02  5.5729e-01         0.5773\nNG011004 -8.3981e-03 -2.3951e-06  3.0697e-04 -4.7919e-01         0.6318\nNG027007  3.9793e-01 -1.6916e-03  6.5269e-01  4.9464e-01         0.6209\nNG030007  5.9514e-02 -6.6449e-05  1.7098e-02  4.5565e-01         0.6486\nNG030008 -8.1927e-02 -6.3380e-06  5.3942e-04 -3.5272e+00         0.0004\nNG024003  5.1947e+00 -7.3523e-03  1.1239e+00  4.9069e+00         0.0000\nNG013003 -6.0047e-01 -3.2531e-04  6.2682e-02 -2.3971e+00         0.0165\nNG028004  4.1374e-01 -3.2531e-04  5.0081e-02  1.8503e+00         0.0643\nNG028005 -5.1956e-02 -1.4749e-03  2.2680e-01 -1.0600e-01         0.9156\nNG031005 -5.0841e-02 -5.4275e-05  8.3578e-03 -5.5552e-01         0.5785\nNG030009  1.4958e-01 -5.1577e-05  4.9446e-03  2.1279e+00         0.0333\nNG012002  8.7695e-02 -2.0041e-04  5.1562e-02  3.8708e-01         0.6987\nNG017003  2.6769e-01 -3.2531e-04  5.0081e-02  1.1976e+00         0.2311\nNG030010  6.3460e-01 -7.8598e-03  8.5553e-01  6.9459e-01         0.4873\nNG006002  2.1155e-01 -1.4925e-04  2.8763e-02  1.2482e+00         0.2120\nNG003003  2.1926e-02 -1.0562e-04  2.0355e-02  1.5442e-01         0.8773\nNG024004  1.3996e+00 -5.9315e-03  7.5570e-01  1.6168e+00         0.1059\nNG013004 -1.0664e+00 -1.3297e-03  2.0450e-01 -2.3552e+00         0.0185\nNG013005  6.1959e-01 -1.2468e-03  1.3661e-01  1.6797e+00         0.0930\nNG013006  6.6563e-01 -1.5358e-03  1.4701e-01  1.7400e+00         0.0819\nNG004009  8.4749e-01 -1.4014e-03  2.1550e-01  1.8286e+00         0.0675\nNG033009  9.4563e-01 -1.6277e-03  2.0827e-01  2.0757e+00         0.0379\nNG033010  6.9021e-01 -1.4749e-03  1.4120e-01  1.8408e+00         0.0657\nNG013007 -7.7908e-01 -5.2377e-04  8.0617e-02 -2.7421e+00         0.0061\nNG014003  7.7086e-01 -1.3297e-03  2.0450e-01  1.7076e+00         0.0877\nNG014004  9.2093e-01 -1.5504e-03  2.3838e-01  1.8894e+00         0.0588\nNG014005  7.6545e-01 -1.5504e-03  3.9834e-01  1.2153e+00         0.2243\nNG025007 -3.6995e-01 -1.7723e-03  1.6962e-01 -8.9396e-01         0.3713\nNG012003  3.0774e-01 -4.3874e-04  8.4529e-02  1.0600e+00         0.2892\nNG012004  2.7947e-01 -4.3874e-04  6.7535e-02  1.0771e+00         0.2814\nNG012005  3.0774e-01 -4.3874e-04  3.7324e-02  1.5952e+00         0.1107\nNG012006  2.5330e-01 -5.2377e-04  6.7093e-02  9.7994e-01         0.3271\nNG029007 -1.1965e-01 -8.1339e-04  1.2516e-01 -3.3591e-01         0.7369\nNG003004 -6.6417e-02 -2.2324e-04  2.8605e-02 -3.9138e-01         0.6955\nNG003005 -9.9313e-03 -6.3380e-06  6.9535e-04 -3.7638e-01         0.7066\nNG033011  3.5951e-01 -9.9952e-04  1.0955e-01  1.0892e+00         0.2761\nNG010005  1.7751e-01 -7.1640e-04  1.3799e-01  4.7979e-01         0.6314\nNG010006  2.3959e-01 -5.6910e-04  8.7591e-02  8.1148e-01         0.4171\nNG025008  3.5680e-01 -1.6277e-03  2.5025e-01  7.1649e-01         0.4737\nNG003006  5.9762e-04 -6.9507e-05  8.9077e-03  7.0684e-03         0.9944\nNG003007 -5.3116e-02 -2.0041e-04  3.0857e-02 -3.0124e-01         0.7632\nNG012007  1.7582e-01 -1.4925e-04  2.2981e-02  1.1608e+00         0.2457\nNG012008  1.5230e-01 -3.2531e-04  2.7678e-02  9.1739e-01         0.3589\nNG012009  2.4259e-01 -3.6124e-04  3.9618e-02  1.2206e+00         0.2222\nNG009011  1.4001e+00 -1.6916e-03  4.3457e-01  2.1265e+00         0.0335\nNG028006  5.2532e-01 -7.6926e-04  9.8516e-02  1.6761e+00         0.0937\nNG014006  7.5812e-01 -9.3914e-04  1.4449e-01  1.9969e+00         0.0458\nNG017004  1.6424e-01 -4.8031e-04  7.3931e-02  6.0582e-01         0.5446\nNG011005  5.8749e-01 -8.6966e-04  1.1136e-01  1.7631e+00         0.0779\nNG011006  3.6410e-01 -3.1865e-04  4.9056e-02  1.6453e+00         0.0999\nNG020012  1.8579e-01 -1.3297e-03  2.0450e-01  4.1378e-01         0.6790\nNG022009 -3.2768e-01 -9.3914e-04  1.0294e-01 -1.0184e+00         0.3085\nNG021013  2.4600e-02 -1.3162e-03  1.2602e-01  7.3004e-02         0.9418\nNG036004  1.7425e-01 -1.3297e-03  1.1302e-01  5.2226e-01         0.6015\nNG002002  1.1271e+00 -1.6277e-03  2.0827e-01  2.4733e+00         0.0134\nNG016005  9.0870e-01 -4.5316e-03  6.9469e-01  1.0957e+00         0.2732\nNG036005  5.8078e-01 -4.8031e-04  4.6027e-02  2.7094e+00         0.0067\nNG021014 -3.7568e-01 -5.6910e-04  8.7591e-02 -1.2675e+00         0.2050\nNG020013 -1.2497e-01 -1.3297e-03  1.7019e-01 -2.9970e-01         0.7644\nNG034004 -1.3336e-01 -3.9905e-04  7.6885e-02 -4.7953e-01         0.6316\nNG018007 -2.0255e-01 -6.9507e-05  8.9077e-03 -2.1454e+00         0.0319\nNG005007 -7.6106e-01 -1.0452e-02  1.3256e+00 -6.5195e-01         0.5144\nNG005008  2.7157e-02 -8.8063e-04  8.4354e-02  9.6537e-02         0.9231\nNG002003  5.0818e-01 -1.2599e-03  2.4254e-01  1.0344e+00         0.3009\nNG018008  2.6512e-01 -1.9394e-03  1.8558e-01  6.1993e-01         0.5353\nNG020014 -5.3344e-01 -8.8063e-04  9.6531e-02 -1.7141e+00         0.0865\nNG020015 -1.6336e-02 -1.8555e-06  2.8574e-04 -9.6630e-01         0.3339\nNG035004  1.1751e-01 -5.1531e-04  9.9274e-02  3.7459e-01         0.7080\nNG035005  1.3117e+00 -3.6636e-03  4.6782e-01  1.9231e+00         0.0545\nNG020016 -1.3765e-01 -1.4014e-03  2.6973e-01 -2.6234e-01         0.7931\nNG027008  4.2520e-02 -9.8783e-04  1.5197e-01  1.1160e-01         0.9111\nNG007005  7.7837e-01 -8.6966e-04  1.3381e-01  2.1302e+00         0.0332\nNG036006  1.1322e+00 -1.6277e-03  2.0827e-01  2.4844e+00         0.0130\nNG020017 -6.3029e-01 -2.3901e-03  3.6719e-01 -1.0362e+00         0.3001\nNG005009  4.9513e-02 -8.6620e-05  1.6694e-02  3.8387e-01         0.7011\nNG002005  1.0825e+00 -1.4749e-03  2.2680e-01  2.2762e+00         0.0228\nNG019003  3.8218e+00 -8.7432e-03  7.3761e-01  4.4601e+00         0.0000\nNG033012  1.0730e+00 -1.5504e-03  2.9837e-01  1.9672e+00         0.0492\nNG016006 -1.8102e-01 -6.3380e-06  2.4496e-03 -3.6574e+00         0.0003\nNG002004  7.0598e-01 -6.1632e-04  7.8942e-02  2.5149e+00         0.0119\nNG034006  1.6376e-01 -2.0041e-04  2.5680e-02  1.0232e+00         0.3062\nNG008009  1.2461e+00 -1.6277e-03  2.5025e-01  2.4942e+00         0.0126\nNG034007 -5.9560e-02 -3.2531e-04  8.3685e-02 -2.0476e-01         0.8378\nNG036007  1.1415e+00 -1.6277e-03  1.7829e-01  2.7074e+00         0.0068\nNG036008 -2.9028e-01 -1.5504e-03  1.6983e-01 -7.0062e-01         0.4835\nNG007006  2.0483e-01 -3.5422e-04  3.0137e-02  1.1819e+00         0.2372\nNG018009  3.8132e-01 -1.0059e-02  2.5625e+00  2.4450e-01         0.8068\nNG037006  6.0271e-02 -3.9905e-04  4.3763e-02  2.9001e-01         0.7718\nNG027009 -1.8991e-02 -3.2531e-04  3.5679e-02 -9.8820e-02         0.9213\nNG018010 -2.6016e-01 -4.8031e-04  5.2671e-02 -1.1315e+00         0.2578\nNG037007 -1.5029e-02 -6.9507e-05  6.6634e-03 -1.8326e-01         0.8546\nNG002006  2.5243e-01 -8.8063e-04  1.6959e-01  6.1511e-01         0.5385\nNG008010  1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00         0.0058\nNG034005 -1.6611e-02 -8.3203e-05  1.0663e-02 -1.6006e-01         0.8728\nNG015004  4.4939e-02 -8.3203e-05  1.0663e-02  4.3600e-01         0.6628\nNG020018  1.2976e-01 -3.2531e-04  6.2682e-02  5.1958e-01         0.6034\nNG022010  3.3150e-02 -2.3901e-03  4.5958e-01  5.2424e-02         0.9582\nNG018011  1.7154e-01 -8.2400e-04  7.8934e-02  6.1351e-01         0.5395\nNG020019  4.4473e-01 -9.9952e-04  1.2798e-01  1.2460e+00         0.2128\nNG007007  1.9014e-01 -1.2468e-03  1.0598e-01  5.8789e-01         0.5566\nNG007008 -3.5537e-02 -5.2377e-04  6.7093e-02 -1.3517e-01         0.8925\nNG018012  1.5685e-01 -3.9167e-04  5.0179e-02  7.0197e-01         0.4827\nNG008011  1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00         0.0244\nNG018013  4.8530e-01 -1.6916e-03  4.3457e-01  7.3874e-01         0.4601\nNG008012  1.0595e+00 -1.4749e-03  2.2680e-01  2.2278e+00         0.0259\nNG002007  1.0249e+00 -1.4749e-03  1.8875e-01  2.3625e+00         0.0182\nNG031006 -1.6524e-02 -1.3297e-03  2.0450e-01 -3.3600e-02         0.9732\nNG031007 -2.9120e-02 -1.0903e-05  1.3974e-03 -7.7869e-01         0.4362\nNG031008  2.3890e-01 -2.5910e-04  3.9890e-02  1.1974e+00         0.2311\nNG031009  1.9144e-01 -1.1920e-03  1.8334e-01  4.4987e-01         0.6528\nNG031010  2.6967e-01 -2.5910e-04  4.9927e-02  1.2081e+00         0.2270\nNG023006  2.2770e-01 -2.0041e-04  2.1983e-02  1.5371e+00         0.1243\nNG031011 -2.2712e-01 -7.5901e-04  1.1680e-01 -6.6235e-01         0.5077\nNG031012  1.8845e-02 -4.0925e-05  5.2449e-03  2.6077e-01         0.7943\nNG031013 -3.8965e-02 -5.6029e-04  8.6235e-02 -1.3078e-01         0.8959\nNG025009  2.2390e-03 -1.0903e-05  4.2140e-03  3.4659e-02         0.9724\nNG003008  1.2904e-01 -8.2400e-04  1.2679e-01  3.6470e-01         0.7153\nNG003009 -9.1998e-03 -1.4925e-04  2.2981e-02 -5.9702e-02         0.9524\nNG035006 -4.0001e-01 -2.9126e-04  3.1946e-02 -2.2364e+00         0.0253\nNG003010  1.3579e-02 -1.0562e-04  1.3535e-02  1.1762e-01         0.9064\nNG023007  6.7715e-02 -1.9868e-05  5.1126e-03  9.4731e-01         0.3435\nNG029008  2.5630e-01 -1.6903e-04  1.4384e-02  2.1384e+00         0.0325\nNG017005  8.9115e-01 -1.3297e-03  1.2731e-01  2.5013e+00         0.0124\nNG017006  8.3080e-01 -1.1920e-03  2.2948e-01  1.7368e+00         0.0824\nNG004010  8.3572e-01 -1.4749e-03  1.6158e-01  2.0827e+00         0.0373\nNG004011  9.4127e-01 -1.3297e-03  1.7019e-01  2.2849e+00         0.0223\nNG031014  1.3369e-01 -1.4925e-04  1.4307e-02  1.1189e+00         0.2632\nNG013008 -2.6395e-01 -1.4014e-03  2.1550e-01 -5.6557e-01         0.5717\nNG025010 -8.5516e-02 -4.8031e-04  7.3931e-02 -3.1274e-01         0.7545\nNG030011  1.2702e+00 -2.3901e-03  4.5958e-01  1.8772e+00         0.0605\nNG030012  1.8042e+00 -3.5471e-03  6.8127e-01  2.1902e+00         0.0285\nNG030013  5.3311e-01 -3.1865e-04  3.4949e-02  2.8534e+00         0.0043\nNG030014  1.1625e+00 -9.2780e-04  1.1880e-01  3.3755e+00         0.0007\nNG030015 -2.4336e-01 -4.0925e-05  5.2449e-03 -3.3597e+00         0.0008\nNG029009  6.2924e-01 -2.4859e-03  2.7205e-01  1.2112e+00         0.2258\nNG024005  7.9307e+00 -5.2576e-02  3.4595e+00  4.2921e+00         0.0000\nNG030016  1.2027e+00 -1.1135e-03  2.8623e-01  2.2501e+00         0.0244\nNG028007  1.2091e-01 -9.3914e-04  7.9854e-02  4.3119e-01         0.6663\nNG019004  4.7157e+00 -2.8615e-02  2.3657e+00  3.0846e+00         0.0020\nNG023008  5.1810e-01 -7.1640e-04  6.0928e-02  2.1019e+00         0.0356\nNG014007  6.0252e-01 -8.2400e-04  1.2679e-01  1.6944e+00         0.0902\nNG014008  7.8575e-01 -1.4014e-03  2.1550e-01  1.6956e+00         0.0900\nNG014009  9.7099e-01 -1.4014e-03  2.6973e-01  1.8723e+00         0.0612\nNG012010  1.2618e-01 -1.7389e-04  2.2283e-02  8.4644e-01         0.3973\nNG004012  2.4753e-01 -1.4925e-04  1.6372e-02  1.9357e+00         0.0529\nNG017007  3.1114e-01 -5.6910e-04  8.7591e-02  1.0532e+00         0.2922\nNG028008 -9.1066e-01 -1.4749e-03  1.2534e-01 -2.5680e+00         0.0102\nNG028009 -2.1566e-02 -5.4275e-05  5.2032e-03 -2.9822e-01         0.7655\nNG028010  1.0003e-02 -3.3373e-07  6.4326e-05  1.2473e+00         0.2123\nNG028011  7.6232e-02 -6.1632e-04  1.1872e-01  2.2303e-01         0.8235\nNG013009 -2.1311e-01 -2.9930e-03  4.5953e-01 -3.0996e-01         0.7566\nNG023009  3.4728e-01 -3.9167e-04  3.7536e-02  1.7945e+00         0.0727\nNG003011 -8.7294e-03 -3.3373e-07  6.4326e-05 -1.0884e+00         0.2764\nNG010007  6.1088e-01 -1.6277e-03  2.5025e-01  1.2244e+00         0.2208\nNG010008  3.7480e-01 -8.8063e-04  1.6959e-01  9.1226e-01         0.3616\nNG019005 -3.3429e-01 -5.6910e-04  6.2402e-02 -1.3359e+00         0.1816\nNG017008  2.8228e-01 -6.6542e-04  1.0240e-01  8.8420e-01         0.3766\nNG025011  7.8513e-01 -1.5504e-03  1.4841e-01  2.0421e+00         0.0411\nNG028012  2.9551e-01 -1.0618e-03  2.0444e-01  6.5590e-01         0.5119\nNG013010  1.1550e-01 -1.4475e-04  2.2288e-02  7.7463e-01         0.4386\nNG013011  3.1773e-01 -6.5588e-04  7.1911e-02  1.1873e+00         0.2351\nNG009012  1.7514e+00 -1.8549e-03  2.3729e-01  3.5991e+00         0.0003\nNG003012  2.8249e-02 -1.9868e-05  2.1798e-03  6.0548e-01         0.5449\nNG025012 -7.1532e-02 -4.3100e-04  6.6345e-02 -2.7604e-01         0.7825\nNG003013  4.7478e-02 -6.9507e-05  1.0703e-02  4.5959e-01         0.6458\nNG003014  6.4821e-03 -8.6620e-05  2.2288e-02  4.3999e-02         0.9649\nNG012011  3.1590e-02 -1.9868e-05  2.1798e-03  6.7706e-01         0.4984\nNG033013  4.3466e-01 -1.4749e-03  2.8387e-01  8.1859e-01         0.4130\nNG011007  1.6600e-01 -2.7477e-05  3.5215e-03  2.7978e+00         0.0051\nNG001005 -1.4055e-02 -1.8555e-06  2.3780e-04 -9.1131e-01         0.3621\nNG030017  1.0542e+00 -5.6029e-04  6.1436e-02  4.2556e+00         0.0000\nNG029010 -4.6502e-02 -6.6542e-04  1.2817e-01 -1.2803e-01         0.8981\nNG029011  1.7965e+00 -2.2962e-03  3.5280e-01  3.0285e+00         0.0025\nNG013012 -2.0831e-01 -3.2531e-04  6.2682e-02 -8.3073e-01         0.4061\nNG030018  4.5466e-01 -1.9519e-04  3.7616e-02  2.3452e+00         0.0190\nNG030019  1.0931e-01 -1.0903e-05  2.1016e-03  2.3847e+00         0.0171\nNG034008 -9.5441e-02 -1.0497e-03  2.6985e-01 -1.8171e-01         0.8558\nNG024006 -3.2929e-01 -4.0925e-05  7.8878e-03 -3.7072e+00         0.0002\nNG024007 -1.7755e-01 -1.2162e-05  2.3443e-03 -3.6668e+00         0.0002\nNG024008  5.6912e-01 -2.2324e-04  3.4370e-02  3.0710e+00         0.0021\nNG028013 -2.7842e-01 -1.6277e-03  2.5025e-01 -5.5330e-01         0.5801\nNG021015 -2.2698e-02 -3.9905e-04  3.3949e-02 -1.2102e-01         0.9037\nNG003015  2.3604e-01 -7.1640e-04  9.1751e-02  7.8162e-01         0.4344\nNG028014 -3.1866e-01 -2.5910e-04  4.9927e-02 -1.4250e+00         0.1542\nNG029012  3.4339e-01 -2.2324e-04  4.3019e-02  1.6567e+00         0.0976\nNG031015 -2.1322e-02 -1.2162e-05  2.3443e-03 -4.4012e-01         0.6599\nNG024009  6.6949e+00 -1.1886e-02  1.5053e+00  5.4665e+00         0.0000\nNG030020  5.6083e-03 -1.5384e-07  3.9589e-05  8.9137e-01         0.3727\nNG013013 -2.1211e-01 -1.2649e-04  1.2126e-02 -1.9251e+00         0.0542\nNG030021  1.6871e-01 -6.6449e-05  1.0232e-02  1.6685e+00         0.0952\nNG034009  2.2350e-01 -9.9952e-04  1.2798e-01  6.2755e-01         0.5303\nNG013014 -3.6619e-01 -1.5504e-03  1.9839e-01 -8.1866e-01         0.4130\nNG031016 -6.0131e-03 -8.2400e-04  7.8934e-02 -1.8470e-02         0.9853\nNG011008  4.5740e-01 -1.6916e-03  1.8527e-01  1.0666e+00         0.2862\nNG014010 -1.8197e-02 -1.8555e-06  1.5792e-04 -1.4479e+00         0.1476\nNG001006  6.1303e-03 -1.0562e-04  1.6263e-02  4.8899e-02         0.9610\nNG001007 -2.2750e-02 -5.4275e-05  5.9543e-03 -2.9412e-01         0.7687\nNG017009  1.3585e-01 -5.4275e-05  6.9558e-03  1.6296e+00         0.1032\nNG024010  1.6027e+00 -2.2324e-04  5.7433e-02  6.6885e+00         0.0000\nNG001008  4.3276e-01 -5.6910e-04  8.7591e-02  1.4642e+00         0.1431\nNG030022  1.3356e-01 -5.1577e-05  7.9423e-03  1.4992e+00         0.1338\nNG010009  1.8036e-01 -2.9126e-04  5.6124e-02  7.6255e-01         0.4457\nNG010010  2.2985e-01 -5.2377e-04  8.0617e-02  8.1138e-01         0.4171\nNG017010  8.0179e-01 -1.4749e-03  2.8387e-01  1.5076e+00         0.1316\nNG005010 -1.3378e-02 -2.3951e-06  2.2963e-04 -8.8267e-01         0.3774\nNG031017 -1.9886e-01 -1.1259e-03  2.1678e-01 -4.2469e-01         0.6711\nNG003016  2.5139e-02 -1.0903e-05  2.1016e-03  5.4861e-01         0.5833\nNG011009  2.9981e-01 -5.6910e-04  7.2897e-02  1.1125e+00         0.2659\nNG031018 -2.7264e-01 -1.3875e-03  1.7758e-01 -6.4368e-01         0.5198\nNG030023  2.9537e-04 -1.5384e-07  2.3692e-05  6.0714e-02         0.9516\nNG011010 -2.3819e-01 -1.4925e-04  2.2981e-02 -1.5702e+00         0.1164\nNG019006  1.8019e+00 -2.4859e-03  3.8186e-01  2.9200e+00         0.0035\nNG002008  1.0926e+00 -1.4014e-03  3.6011e-01  1.8231e+00         0.0683\nNG018014  4.1537e-02 -1.9868e-05  2.5464e-03  8.2353e-01         0.4102\nNG036009 -1.3994e-01 -1.3297e-03  1.4569e-01 -3.6315e-01         0.7165\nNG035007  2.7125e-01 -2.5316e-04  6.5130e-02  1.0638e+00         0.2874\nNG005011 -2.1869e-03 -1.9868e-05  3.8295e-03 -3.5019e-02         0.9721\nNG022011  5.1413e-02 -8.1339e-04  1.0416e-01  1.6182e-01         0.8714\nNG019007  2.2660e+00 -1.2313e-02  1.5586e+00  1.8249e+00         0.0680\nNG008013  1.3567e-01 -1.9868e-05  3.8295e-03  2.1926e+00         0.0283\nNG021016 -1.3819e-01 -8.6620e-05  1.3338e-02 -1.1958e+00         0.2318\nNG032004  1.5263e-01 -1.2235e-04  1.5680e-02  1.2199e+00         0.2225\nNG032005 -1.3166e-01 -2.0041e-04  3.8621e-02 -6.6893e-01         0.5035\nNG032006  7.8292e-01 -1.7723e-03  2.7245e-01  1.5033e+00         0.1328\nNG023010 -4.1586e-02 -1.2162e-05  1.5588e-03 -1.0530e+00         0.2923\nNG020020  3.3748e-01 -1.4014e-03  1.5353e-01  8.6487e-01         0.3871\nNG019008  3.6773e-01 -1.4607e-03  1.6002e-01  9.2290e-01         0.3561\nNG019009  7.0376e-01 -7.5901e-04  1.9517e-01  1.5947e+00         0.1108\nNG019010 -1.3855e+00 -1.1259e-03  2.8941e-01 -2.5733e+00         0.0101\nNG018015 -1.3986e-01 -1.5504e-03  1.9839e-01 -3.1053e-01         0.7562\nNG021017  1.0373e-01 -2.5910e-04  3.3198e-02  5.7075e-01         0.5682\nNG008014  1.2280e+00 -1.6277e-03  2.5025e-01  2.4579e+00         0.0140\nNG019011  6.9862e-01 -7.0234e-03  7.6514e-01  8.0671e-01         0.4198\nNG024011  1.6859e-01 -1.5358e-03  1.9653e-01  3.8375e-01         0.7012\nNG021018  3.2156e-01 -3.2090e-03  4.0996e-01  5.0722e-01         0.6120\nNG031019 -8.3787e-02 -1.6903e-04  4.3490e-02 -4.0097e-01         0.6884\nNG019012 -9.5898e-01 -9.3914e-04  7.9854e-02 -3.3903e+00         0.0007\nNG008015  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00         0.0514\nNG022012  2.6952e-01 -8.1339e-04  1.2516e-01  7.6413e-01         0.4448\nNG016007  2.4358e+00 -1.4607e-03  2.2462e-01  5.1426e+00         0.0000\nNG032007  3.0479e-01 -1.0497e-03  1.1505e-01  9.0170e-01         0.3672\nNG021019  1.1181e-01 -2.9126e-04  3.1946e-02  6.2722e-01         0.5305\nNG032008  7.3786e-01 -2.1140e-03  3.2487e-01  1.2983e+00         0.1942\nNG021020  4.7488e-03 -2.9456e-05  3.2316e-03  8.4055e-02         0.9330\nNG020021 -1.8739e-01 -1.2235e-04  1.8840e-02 -1.3644e+00         0.1725\nNG036010  2.6079e-01 -7.1640e-04  1.1024e-01  7.8760e-01         0.4309\nNG020022 -4.5621e-02 -3.8586e-05  5.9420e-03 -5.9133e-01         0.5543\nNG035008  5.2632e-01 -8.6966e-04  6.6469e-02  2.0448e+00         0.0409\nNG026004  6.3472e-01 -5.1531e-04  4.3835e-02  3.0341e+00         0.0024\nNG005012 -3.6917e-02 -1.2162e-05  1.3343e-03 -1.0103e+00         0.3124\nNG027010 -2.1227e-01 -6.1632e-04  9.4853e-02 -6.8723e-01         0.4919\nNG021021  2.5970e-01 -3.1865e-04  8.1973e-02  9.0818e-01         0.3638\nNG007009  2.7703e-01 -1.2235e-04  1.3422e-02  2.3923e+00         0.0167\nNG018016 -2.6231e-02 -1.0562e-04  1.0125e-02 -2.5965e-01         0.7951\nNG019013  3.8165e-01 -2.8497e-04  5.4911e-02  1.6299e+00         0.1031\nNG037008  2.5215e-01 -4.8031e-04  9.2535e-02  8.3049e-01         0.4063\nNG019014  2.2014e-01 -1.4475e-04  2.2288e-02  1.4755e+00         0.1401\nNG018017  1.4889e+00 -4.1483e-03  4.5323e-01  2.2178e+00         0.0266\nNG026005 -9.4618e-03 -2.3951e-06  4.6165e-04 -4.4025e-01         0.6598\nNG034010 -8.3087e-02 -1.4925e-04  1.9126e-02 -5.9971e-01         0.5487\nNG026006 -2.3081e-01 -5.6910e-04  2.1983e-01 -4.9106e-01         0.6234\nNG033014  4.3336e-01 -4.8031e-04  4.0859e-02  2.1463e+00         0.0319\nNG020023  2.9650e-03 -3.3373e-07  6.4326e-05  3.6973e-01         0.7116\nNG005013 -8.1591e-02 -1.2162e-05  1.8730e-03 -1.8850e+00         0.0594\nNG018018  7.6751e-01 -3.2090e-03  4.0996e-01  1.2037e+00         0.2287\nNG020024 -4.4130e-02 -8.3203e-05  9.1276e-03 -4.6103e-01         0.6448\nNG018019 -8.1356e-01 -2.3901e-03  3.6719e-01 -1.3387e+00         0.1807\nNG023011 -6.4567e-04 -1.5384e-07  2.3692e-05 -1.3262e-01         0.8945\nNG022013 -1.7906e-02 -3.1000e-03  3.9608e-01 -2.3526e-02         0.9812\nNG026007  2.8901e-02 -5.4386e-06  5.2141e-04  1.2659e+00         0.2055\nNG006003  4.1120e-01 -1.5504e-03  3.9834e-01  6.5397e-01         0.5131\nNG008016  1.1281e+00 -1.6277e-03  1.2431e-01  3.2043e+00         0.0014\nNG007010  1.0935e+00 -1.9394e-03  2.1236e-01  2.3771e+00         0.0174\nNG027011 -3.9073e-02 -1.0562e-04  2.7175e-02 -2.3638e-01         0.8131\nNG025013  5.7842e-01 -1.1920e-03  2.2948e-01  1.2099e+00         0.2263\nNG019015 -3.1227e-01 -4.8031e-04  7.3931e-02 -1.1467e+00         0.2515\nNG019016  1.7688e+00 -1.9394e-03  2.4808e-01  3.5552e+00         0.0004\nNG015005  3.2529e-01 -9.8783e-04  1.5197e-01  8.3697e-01         0.4026\nNG008017  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00         0.0514\nNG020025  2.9856e-01 -9.9952e-04  7.6385e-02  1.0839e+00         0.2784\nNG020026  6.7138e-02 -7.1640e-04  1.3799e-01  1.8267e-01         0.8551\nNG020027 -1.8849e-03 -1.8555e-06  3.5764e-04 -9.9571e-02         0.9207\nNG021022  1.2681e-01 -6.5588e-04  1.0094e-01  4.0121e-01         0.6883\nNG035009  7.5819e-01 -1.5358e-03  2.3615e-01  1.5634e+00         0.1180\nNG021023  1.0092e-01 -1.4014e-03  2.6973e-01  1.9701e-01         0.8438\nNG015006  2.6045e-01 -9.2780e-04  2.3853e-01  5.3517e-01         0.5925\nNG016008  2.1905e+00 -2.9930e-03  3.8244e-01  3.5469e+00         0.0004\nNG007011  3.4467e-01 -1.9519e-04  2.5012e-02  2.1806e+00         0.0292\nNG034011 -9.2051e-02 -5.1577e-05  4.9446e-03 -1.3083e+00         0.1908\nNG008018  1.0582e+00 -1.5504e-03  2.9837e-01  1.9401e+00         0.0524\nNG026008  6.2038e-01 -2.5835e-03  2.4705e-01  1.2534e+00         0.2101\nNG031020  1.7886e-03 -8.3203e-05  9.1276e-03  1.9592e-02         0.9844\nNG025014  8.6984e-01 -8.8063e-04  1.6959e-01  2.1144e+00         0.0345\nNG025015  1.0537e+00 -1.4749e-03  2.2680e-01  2.2157e+00         0.0267\nNG002009 -1.5843e-01 -1.6277e-03  2.0827e-01 -3.4359e-01         0.7312\nNG032009  1.4196e+00 -2.4859e-03  2.7205e-01  2.7264e+00         0.0064\nNG032010 -1.1870e-02 -3.3373e-07  6.4326e-05 -1.4799e+00         0.1389\nNG027012  8.4157e-02 -2.0041e-04  2.5680e-02  5.2641e-01         0.5986\nNG035010 -2.5992e-01 -1.1792e-03  1.1292e-01 -7.6999e-01         0.4413\nNG027013 -1.3204e-01 -5.4275e-05  1.0461e-02 -1.2904e+00         0.1969\nNG019017 -2.5568e-01 -9.2780e-04  1.4275e-01 -6.7426e-01         0.5001\nNG007012  4.0363e-01 -3.5422e-04  5.4530e-02  1.7300e+00         0.0836\nNG023012 -2.3647e-01 -6.1632e-04  4.7118e-02 -1.0865e+00         0.2772\nNG036011 -2.0137e-01 -1.1259e-03  1.7320e-01 -4.8117e-01         0.6304\nNG002010  1.1675e+00 -1.6277e-03  3.1322e-01  2.0889e+00         0.0367\nNG020028  1.8047e-01 -3.2531e-04  3.1178e-02  1.0239e+00         0.3059\nNG008019  1.0717e+00 -1.6277e-03  2.0827e-01  2.3518e+00         0.0187\nNG027014  1.0032e-02 -5.4386e-06  6.9703e-04  3.8020e-01         0.7038\nNG008020  1.1648e+00 -1.4749e-03  1.6158e-01  2.9014e+00         0.0037\nNG021024  1.3145e-01 -4.5316e-03  6.9469e-01  1.6314e-01         0.8704\nNG008021  6.3142e-01 -1.3297e-03  5.1324e-01  8.8323e-01         0.3771\nNG018020  4.2948e-03 -1.5384e-07  2.3692e-05  8.8239e-01         0.3776\nNG002011  1.0689e+00 -1.3297e-03  2.5595e-01  2.1153e+00         0.0344\nNG022014  2.4269e-01 -1.4475e-04  1.8549e-02  1.7830e+00         0.0746\nNG020029 -1.7618e-01 -1.4749e-03  1.6158e-01 -4.3463e-01         0.6638\nNG007013 -2.0568e-02 -1.9868e-05  3.8295e-03 -3.3204e-01         0.7399\nNG018021 -7.2227e-01 -6.1632e-04  9.4853e-02 -2.3432e+00         0.0191\nNG021025  3.5764e-01 -5.6910e-04  8.7591e-02  1.2103e+00         0.2261\nNG032011  1.3249e+00 -3.1000e-03  3.9608e-01  2.1101e+00         0.0349\nNG021026  8.6679e-02 -2.2324e-04  2.8605e-02  5.1382e-01         0.6074\nNG037009  1.2453e-01 -1.4925e-04  1.2701e-02  1.1063e+00         0.2686\nNG027015  2.2996e-01 -3.1865e-04  2.7112e-02  1.3986e+00         0.1619\nNG019018 -1.1691e+00 -1.4014e-03  2.6973e-01 -2.2484e+00         0.0246\nNG008022  1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00         0.0244\nNG037010  3.2091e-02 -5.1577e-05  4.3894e-03  4.8516e-01         0.6276\nNG027016 -2.2500e-02 -2.9456e-05  2.8239e-03 -4.2285e-01         0.6724\nNG021027  4.0696e-01 -2.8497e-04  5.4911e-02  1.7379e+00         0.0822\nNG021028 -4.1196e-02 -3.8586e-05  7.4371e-03 -4.7726e-01         0.6332\nNG002012  2.5996e-01 -1.4014e-03  1.1910e-01  7.5733e-01         0.4489\nNG017011  4.1673e-01 -7.6926e-04  6.5421e-02  1.6323e+00         0.1026\nNG003017  2.4038e-02 -6.9507e-05  1.3396e-02  2.0828e-01         0.8350\nNG002013  1.0360e+00 -1.2599e-03  3.2380e-01  1.8228e+00         0.0683\nNG018022  5.3008e-02 -1.5504e-03  2.3838e-01  1.1174e-01         0.9110\nNG032012  2.2082e+00 -2.4859e-03  6.3810e-01  2.7674e+00         0.0057\nNG020030  5.4171e-02 -1.4749e-03  1.6158e-01  1.3843e-01         0.8899\nNG005014  1.8292e-02 -1.2162e-05  1.8730e-03  4.2294e-01         0.6723\nNG003018 -1.6085e-01 -1.1135e-03  1.4256e-01 -4.2306e-01         0.6723\nNG013015 -1.7727e-01 -8.6620e-05  1.1101e-02 -1.6817e+00         0.0926\nNG008023  1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00         0.0118\nNG027017  4.1411e-01 -1.0497e-03  5.6999e-02  1.7389e+00         0.0820\nNG008024  1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00         0.0118\nNG023013  6.8447e-02 -2.5316e-04  6.5130e-02  2.6920e-01         0.7878\nNG024012  8.4196e-01 -6.5588e-04  5.5785e-02  3.5675e+00         0.0004\nNG002014  1.1172e+00 -1.5504e-03  2.9837e-01  2.0482e+00         0.0405\nNG002015  1.1591e+00 -1.5504e-03  3.9834e-01  1.8389e+00         0.0659\nNG021029  2.3732e-01 -3.9905e-04  3.8242e-02  1.2156e+00         0.2241\nNG025016  1.0431e+00 -1.2599e-03  1.9378e-01  2.3724e+00         0.0177\nNG027018 -1.1309e-03 -1.5384e-07  2.9653e-05 -2.0765e-01         0.8355\nNG016009  7.4541e-01 -1.3162e-03  2.5336e-01  1.4835e+00         0.1379\nNG036012  9.0273e-02 -9.3914e-04  1.2025e-01  2.6303e-01         0.7925\nNG020031 -6.4231e-02 -5.1577e-05  6.6100e-03 -7.8940e-01         0.4299\nNG026009  1.9796e-01 -5.6029e-04  5.3686e-02  8.5677e-01         0.3916\nNG026010  3.1335e-01 -8.1339e-04  1.5665e-01  7.9377e-01         0.4273\nNG010011 -7.1570e-02 -1.8249e-05  1.7496e-03 -1.7106e+00         0.0872\nNG010012  1.1464e-01 -1.7389e-04  1.9074e-02  8.3134e-01         0.4058\nNG006004  2.8016e-01 -2.0041e-04  3.0857e-02  1.5960e+00         0.1105\nNG008025  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00         0.0514\nNG008026  1.0897e+00 -1.6277e-03  1.7829e-01  2.5846e+00         0.0098\nNG022015  5.1373e-02 -1.9519e-04  2.5012e-02  3.2607e-01         0.7444\nNG017012  3.8138e-01 -8.2400e-04  7.8934e-02  1.3604e+00         0.1737\nNG036013  1.2072e-02 -6.3380e-06  9.7603e-04  3.8661e-01         0.6990\nNG005015 -9.8898e-02 -5.6910e-04  5.4530e-02 -4.2108e-01         0.6737\nNG017013  7.6469e-01 -1.1259e-03  1.7320e-01  1.8402e+00         0.0657\nNG004013  6.2583e-01 -7.6926e-04  9.8516e-02  1.9964e+00         0.0459\nNG014011  9.3026e-02 -1.5504e-03  1.3174e-01  2.6056e-01         0.7944\nNG014012  1.5217e-01 -2.9456e-05  4.5360e-03  2.2598e+00         0.0238\nNG017014  5.7646e-01 -5.2377e-04  6.7093e-02  2.2275e+00         0.0259\nNG004014  8.8679e-01 -9.3914e-04  2.4144e-01  1.8066e+00         0.0708\nNG004015  9.2056e-01 -1.4749e-03  1.4120e-01  2.4538e+00         0.0141\nNG003019  1.1681e-03 -1.0184e-04  1.9627e-02  9.0651e-03         0.9928\nNG003020  4.3614e-02 -2.2881e-04  4.4093e-02  2.0879e-01         0.8346\nNG003021 -2.0447e-02 -6.6449e-05  6.3702e-03 -2.5536e-01         0.7984\nNG014013  6.7234e-01 -9.3914e-04  1.2025e-01  1.9416e+00         0.0522\nNG002016  6.2298e-01 -1.6277e-03  3.1322e-01  1.1160e+00         0.2644\nNG017015  4.9715e-01 -5.6910e-04  8.7591e-02  1.6817e+00         0.0926\nNG028015  3.2338e-01 -6.6542e-04  6.3753e-02  1.2834e+00         0.1994\nNG009013  9.3118e-01 -6.0715e-04  1.5614e-01  2.3581e+00         0.0184\nNG007014  1.4691e-02 -3.8586e-05  7.4371e-03  1.7080e-01         0.8644\nNG026011  1.6951e-01 -4.7222e-04  9.0976e-02  5.6357e-01         0.5730\nNG001009 -2.4197e-01 -4.9318e-03  4.1767e-01 -3.6678e-01         0.7138\nNG033015 -6.5236e-02 -5.4386e-06  5.9668e-04 -2.6704e+00         0.0076\nNG030024  8.4506e-01 -1.6916e-03  1.4373e-01  2.2335e+00         0.0255\nNG003022  9.9888e-03 -1.8249e-05  2.0021e-03  2.2364e-01         0.8230\nNG017016  1.9787e-01 -2.5910e-04  3.9890e-02  9.9200e-01         0.3212\nNG009014  1.4982e+00 -5.2080e-03  5.6841e-01  1.9941e+00         0.0461\nNG009015  1.3832e+00 -2.3901e-03  3.0559e-01  2.5066e+00         0.0122\nNG028016  3.6842e-02 -1.9868e-05  2.1798e-03  7.8954e-01         0.4298\nNG029013  4.0670e-01 -7.8598e-03  8.5553e-01  4.4820e-01         0.6540\nNG030025  2.6021e+00 -5.4918e-03  5.9920e-01  3.3686e+00         0.0008\nNG028017  8.4874e-03 -3.6124e-04  3.4620e-02  4.7556e-02         0.9621\nNG009016  1.1578e-01 -2.2962e-03  1.5911e-01  2.9601e-01         0.7672\nNG024013  6.6227e+00 -3.9022e-03  3.0085e+00  3.8204e+00         0.0001\nNG023014  2.7372e-02 -3.2531e-04  3.5679e-02  1.4664e-01         0.8834\nNG033016  3.2130e-01 -8.2400e-04  7.0072e-02  1.2169e+00         0.2236\nNG007015  1.1029e-01 -4.0925e-05  6.3021e-03  1.3899e+00         0.1646\nNG004016  5.2719e-01 -8.2400e-04  6.2983e-02  2.1040e+00         0.0354\nNG006005  4.2386e-01 -4.8031e-04  7.3931e-02  1.5606e+00         0.1186\nNG031021 -2.0503e-01 -1.7389e-04  4.4739e-02 -9.6850e-01         0.3328\nNG031022  2.0166e-01 -2.5316e-04  4.8784e-02  9.1416e-01         0.3606\nNG031023  7.3130e-01 -1.1792e-03  1.8138e-01  1.7199e+00         0.0855\nNG009017  2.0417e+00 -2.2042e-03  3.3869e-01  3.5121e+00         0.0004\nNG023015  7.1880e-03 -2.5910e-04  1.0011e-01  2.3536e-02         0.9812\nNG033017  1.2340e+00 -1.6277e-03  2.5025e-01  2.4700e+00         0.0135\nNG028018 -1.4659e-01 -1.4925e-04  2.2981e-02 -9.6603e-01         0.3340\nNG017017 -2.9739e-01 -3.1865e-04  3.0540e-02 -1.6999e+00         0.0891\nNG001010  2.2340e-01 -4.8031e-04  9.2535e-02  7.3597e-01         0.4618\nNG017018 -1.7016e-01 -8.3203e-05  9.1276e-03 -1.7802e+00         0.0750\nNG011011 -8.4012e-02 -8.1339e-04  1.0416e-01 -2.5779e-01         0.7966\nNG011012  5.0585e-01 -1.6916e-03  3.2550e-01  8.8961e-01         0.3737\nNG007016  2.9012e-02 -1.2162e-05  2.3443e-03  5.9946e-01         0.5489\nNG014014  6.6482e-01 -7.6926e-04  7.3694e-02  2.4518e+00         0.0142\nNG025017 -2.8194e-01 -8.6620e-05  1.6694e-02 -2.1814e+00         0.0292\nNG007017 -1.6483e-01 -1.2649e-04  1.3876e-02 -1.3982e+00         0.1621\nNG024014  3.8743e+00 -6.0818e-03  6.6319e-01  4.7649e+00         0.0000\nNG023016 -4.3259e-02 -1.4475e-04  2.2288e-02 -2.8879e-01         0.7727\nNG023017 -5.7052e-02 -5.1577e-05  7.9423e-03 -6.3959e-01         0.5224\nNG017019  3.6430e-01 -2.9126e-04  2.7916e-02  2.1821e+00         0.0291\nNG029014  1.6093e-01 -1.2235e-04  1.8840e-02  1.1733e+00         0.2407\nNG003023  3.1158e-02 -3.8586e-05  4.2332e-03  4.7948e-01         0.6316\nNG010013  4.8875e-01 -1.1920e-03  1.3062e-01  1.3556e+00         0.1752\nNG007018  6.1094e-02 -1.0562e-04  1.3535e-02  5.2604e-01         0.5989\nNG033018  1.1394e+00 -1.5504e-03  2.3838e-01  2.3368e+00         0.0194\nNG030026 -4.7970e-01 -7.1640e-04  1.3799e-01 -1.2895e+00         0.1972\nNG023018  2.9334e-01 -6.6542e-04  7.2956e-02  1.0885e+00         0.2764\nNG030027  5.8173e-01 -5.6029e-04  5.3686e-02  2.5131e+00         0.0120\nNG031024 -4.9347e-02 -1.0562e-04  1.1586e-02 -4.5747e-01         0.6473\nNG031025  2.4317e-01 -5.6910e-04  5.4530e-02  1.0438e+00         0.2966\nNG023019 -9.3535e-02 -8.6620e-05  1.1101e-02 -8.8695e-01         0.3751\nNG033019  3.8428e-01 -1.1920e-03  2.2948e-01  8.0468e-01         0.4210\nNG031026 -1.3621e-01 -2.8497e-04  3.6512e-02 -7.1136e-01         0.4769\nNG029015  1.5652e+00 -1.9394e-03  2.9809e-01  2.8704e+00         0.0041\nNG029016  1.4039e+00 -3.9022e-03  4.2644e-01  2.1558e+00         0.0311\nNG011013  7.3697e-01 -3.1000e-03  2.9629e-01  1.3596e+00         0.1739\nNG004017  8.5261e-01 -1.5504e-03  1.6983e-01  2.0727e+00         0.0382\nNG004018  9.5775e-01 -1.4749e-03  3.7898e-01  1.5582e+00         0.1192\nNG003024  2.2091e-02 -2.9456e-05  3.7751e-03  3.6003e-01         0.7188\nNG033020  5.4810e-01 -1.2599e-03  2.4254e-01  1.1155e+00         0.2646\nNG012012  7.8103e-02 -1.2649e-04  3.2546e-02  4.3363e-01         0.6646\nNG031027  8.6743e-03 -6.3380e-06  9.7603e-04  2.7786e-01         0.7811\nNG012013 -3.8818e-01 -6.0715e-04  3.8579e-02 -1.9732e+00         0.0485\nNG031028 -2.3074e-02 -1.9868e-05  1.9048e-03 -5.2823e-01         0.5973\nNG030028  1.3380e+00 -3.2090e-03  2.4469e-01  2.7115e+00         0.0067\nNG017020  6.6415e-01 -7.1640e-04  9.1751e-02  2.1950e+00         0.0282\nNG030029  3.8157e-01 -6.0715e-04  1.1696e-01  1.1175e+00         0.2638\nNG003025 -2.9816e-01 -1.0618e-03  1.6334e-01 -7.3512e-01         0.4623\nNG017021  7.5463e-01 -1.1259e-03  1.7320e-01  1.8160e+00         0.0694\nNG017022  5.1528e-01 -9.9952e-04  1.0955e-01  1.5598e+00         0.1188\nNG017023  2.1165e-01 -9.9952e-04  2.5695e-01  4.1950e-01         0.6748\nNG003026 -2.0130e-02 -5.1577e-05  5.6583e-03 -2.6692e-01         0.7895\nNG004019  5.9947e-01 -6.6542e-04  1.0240e-01  1.8754e+00         0.0607\nNG004020  6.4364e-01 -8.8063e-04  1.1277e-01  1.9193e+00         0.0549\nNG029017  1.3031e+00 -3.7819e-03  4.1335e-01  2.0327e+00         0.0421\nNG010014  7.9825e-01 -1.2599e-03  1.9378e-01  1.8163e+00         0.0693\nNG010015  6.2773e-01 -8.2400e-04  9.0329e-02  2.0914e+00         0.0365\nNG025018  6.9558e-01 -1.6277e-03  2.5025e-01  1.3937e+00         0.1634\nNG001011  8.0750e-03 -5.2377e-04  5.0189e-02  3.8383e-02         0.9694\nNG030030  4.6860e-01 -5.6029e-04  6.1436e-02  1.8928e+00         0.0584\nNG007019  1.1250e-02 -4.0925e-05  3.9234e-03  1.8026e-01         0.8569\nNG012014 -2.9406e-02 -6.9507e-05  5.3168e-03 -4.0233e-01         0.6874\nNG012015 -1.4238e-01 -8.6620e-05  1.1101e-02 -1.3506e+00         0.1768\nNG012016 -7.3679e-03 -1.4925e-04  2.2981e-02 -4.7618e-02         0.9620\nNG012017 -5.5478e-03 -5.4275e-05  8.3578e-03 -6.0090e-02         0.9521\nNG017026  4.7785e-01 -1.4749e-03  5.6921e-01  6.3532e-01         0.5252\nNG017024  2.2707e-01 -1.2649e-04  1.6210e-02  1.7845e+00         0.0743\nNG017025  2.1351e-01 -4.3874e-04  5.6206e-02  9.0244e-01         0.3668\nNG029018  5.7511e-01 -2.3901e-03  2.6159e-01  1.1291e+00         0.2589\nNG013016  1.6371e-01 -8.6966e-04  1.3381e-01  4.4992e-01         0.6528\nNG004021  3.1633e-01 -1.7389e-04  2.6774e-02  1.9343e+00         0.0531\nNG033021  3.4468e-01 -1.4749e-03  1.4120e-01  9.2121e-01         0.3569\nNG031029 -6.3373e-02 -1.2649e-04  1.0764e-02 -6.0960e-01         0.5421\nNG031030  1.7885e-01 -8.2400e-04  9.0329e-02  5.9781e-01         0.5500\nNG024015  8.3120e+00 -1.8811e-02  2.0249e+00  5.8544e+00         0.0000\nNG027019 -2.0520e-03 -3.3373e-07  2.8403e-05 -3.8497e-01         0.7003\nNG032013  1.9527e+00 -3.2090e-03  3.5093e-01  3.3016e+00         0.0010\nNG010016  5.2612e-01 -9.9952e-04  1.5377e-01  1.3442e+00         0.1789\nNG024016  1.1201e+00 -4.7965e-03  6.1179e-01  1.4382e+00         0.1504\nNG033022  6.2063e-01 -7.6926e-04  1.4816e-01  1.6144e+00         0.1064\nNG036014  7.9197e-01 -1.1920e-03  3.0637e-01  1.4330e+00         0.1519\nNG032014  2.0377e+00 -4.2742e-03  5.4546e-01  2.7648e+00         0.0057\nNG034012  4.4925e-01 -1.2599e-03  1.3805e-01  1.2125e+00         0.2253\nNG027020 -8.4046e-03 -3.3373e-07  5.1394e-05 -1.1723e+00         0.2411\nNG020032  2.6986e-02 -3.2531e-04  5.0081e-02  1.2204e-01         0.9029\nNG028019  3.6799e-01 -4.8031e-04  7.3931e-02  1.3552e+00         0.1754\nNG027021  1.7095e-01 -1.1135e-03  1.2203e-01  4.9256e-01         0.6223\nNG021030 -8.3028e-02 -2.9456e-05  4.5360e-03 -1.2324e+00         0.2178\nNG020033  6.5987e-01 -1.2599e-03  1.9378e-01  1.5019e+00         0.1331\nNG018023  3.8028e-02 -1.2599e-03  1.6127e-01  9.7831e-02         0.9221\nNG032015  1.5301e+00 -3.4325e-03  3.7530e-01  2.5032e+00         0.0123\nNG020034 -1.1049e-01 -8.1339e-04  8.9166e-02 -3.6728e-01         0.7134\nNG018024 -5.1784e-03 -1.2468e-03  1.9176e-01 -8.9783e-03         0.9928\nNG019019  9.0495e+00 -1.7248e-02  3.2672e+00  5.0161e+00         0.0000\nNG034013 -1.2167e-01 -5.1577e-05  1.3272e-02 -1.0557e+00         0.2911\nNG021031 -3.2913e-01 -6.9507e-05  1.3396e-02 -2.8430e+00         0.0045\nNG021032 -2.2388e-02 -3.6124e-04  4.6281e-02 -1.0239e-01         0.9185\nNG006006 -4.2228e-02 -5.4386e-06  4.6287e-04 -1.9625e+00         0.0497\nNG022016  3.1197e-01 -7.0651e-04  1.3608e-01  8.4761e-01         0.3967\nNG031031 -1.6296e-03 -2.3951e-06  3.6884e-04 -8.4725e-02         0.9325\nNG031032  2.3715e-02 -5.1577e-05  1.3272e-02  2.0631e-01         0.8366\nNG021033  1.3349e-02 -1.8555e-06  2.3780e-04  8.6577e-01         0.3866\nNG019020  8.4485e-01 -1.0497e-03  1.0054e-01  2.6678e+00         0.0076\nNG010017  5.7035e-01 -1.0618e-03  2.0444e-01  1.2638e+00         0.2063\nNG035011 -3.1543e-01 -1.7389e-04  6.7196e-02 -1.2162e+00         0.2239\nNG028020 -1.1518e-01 -3.9167e-04  5.0179e-02 -5.1242e-01         0.6084\nNG034014 -9.6663e-02 -5.6910e-04  8.7591e-02 -3.2469e-01         0.7454\nNG022017  8.0602e-02 -9.2780e-04  8.8869e-02  2.7349e-01         0.7845\nNG008027  1.3145e-01 -1.6277e-03  1.5580e-01  3.3715e-01         0.7360\nNG020035  2.2983e-01 -3.2531e-04  5.0081e-02  1.0284e+00         0.3037\nNG002017  9.9270e-01 -1.3297e-03  1.4569e-01  2.6043e+00         0.0092\nNG032016  1.4623e+00 -4.2742e-03  4.6692e-01  2.1463e+00         0.0319\nNG037011  2.6920e-02 -6.3380e-06  1.6310e-03  6.6675e-01         0.5049\nNG005016 -5.8645e-02 -6.6449e-05  1.0232e-02 -5.7910e-01         0.5625\nNG027022 -8.5911e-02 -2.5910e-04  2.8419e-02 -5.0808e-01         0.6114\nNG016010  1.9560e+00 -4.6631e-03  7.1476e-01  2.3191e+00         0.0204\nNG025019  1.0692e+00 -1.4014e-03  2.6973e-01  2.0614e+00         0.0393\nNG034015 -6.5842e-02 -6.6542e-04  1.2817e-01 -1.8205e-01         0.8555\nNG019021  3.6742e+00 -1.2747e-02  1.2065e+00  3.3566e+00         0.0008\nNG034016  2.9738e-01 -1.4014e-03  3.6011e-01  4.9790e-01         0.6186\nNG034017  3.0015e-01 -1.1920e-03  2.2948e-01  6.2907e-01         0.5293\nNG002018  9.3505e-01 -1.1259e-03  1.2339e-01  2.6651e+00         0.0077\nNG006007  2.5622e-01 -2.9126e-04  3.1946e-02  1.4352e+00         0.1512\nNG018025  8.9191e-01 -5.1531e-04  6.6011e-02  3.4735e+00         0.0005\nNG027023  6.1243e-02 -8.2400e-04  1.5869e-01  1.5580e-01         0.8762\nNG020036  1.6924e-01 -8.6966e-04  1.6748e-01  4.1567e-01         0.6777\nNG022018  1.4857e-01 -2.7477e-05  4.2313e-03  2.2845e+00         0.0223\nNG025020  1.0077e+00 -1.1920e-03  1.5259e-01  2.5827e+00         0.0098\nNG031033  1.3377e+00 -2.3901e-03  1.6560e-01  3.2931e+00         0.0010\nNG027024 -4.2032e-01 -1.0618e-03  1.6334e-01 -1.0374e+00         0.2996\nNG005017 -2.0376e-01 -3.9905e-04  3.0514e-02 -1.1641e+00         0.2444\nNG033023  1.0710e+00 -1.4749e-03  2.2680e-01  2.2520e+00         0.0243\nNG020037 -1.3067e-01 -2.5835e-03  3.3026e-01 -2.2289e-01         0.8236\nNG035012  7.9880e-01 -1.6916e-03  3.2550e-01  1.4031e+00         0.1606\nNG037012 -3.1578e-01 -7.0651e-04  1.3608e-01 -8.5411e-01         0.3930\nNG034018  2.4912e-02 -5.1577e-05  4.3894e-03  3.7679e-01         0.7063\nNG034019 -3.4236e-03 -3.3373e-07  4.2772e-05 -5.2343e-01         0.6007\nNG020038  3.3251e-01 -1.1920e-03  2.2948e-01  6.9661e-01         0.4860\nNG007020  1.9596e-01 -8.3203e-05  1.6036e-02  1.5482e+00         0.1216\nNG036015  8.8341e-01 -1.2599e-03  1.9378e-01  2.0097e+00         0.0445\nNG018026 -2.1826e-01 -9.8783e-04  1.2648e-01 -6.1094e-01         0.5412\nNG020039  7.3790e-01 -1.5504e-03  2.3838e-01  1.5145e+00         0.1299\nNG005018  6.4220e-02 -1.7389e-04  1.3300e-02  5.5837e-01         0.5766\nNG026012  6.0549e-02 -1.8249e-05  2.3389e-03  1.2524e+00         0.2104\nNG002019 -2.7763e-01 -1.5504e-03  3.9834e-01 -4.3743e-01         0.6618\nNG037013 -8.4724e-03 -5.4386e-06  1.0483e-03 -2.6151e-01         0.7937\nNG020040 -3.6620e-03 -1.5384e-07  1.6879e-05 -8.9133e-01         0.3728\nNG020041 -2.3849e-01 -1.0497e-03  8.9248e-02 -7.9480e-01         0.4267\nNG034020 -3.3298e-01 -6.0715e-04  6.6571e-02 -1.2882e+00         0.1977\nNG014015  6.7295e-01 -1.5504e-03  2.3838e-01  1.3815e+00         0.1671\nNG014016  7.3616e-01 -9.3914e-04  7.9854e-02  2.6084e+00         0.0091\nNG010018  7.6129e-01 -1.3297e-03  2.5595e-01  1.5074e+00         0.1317\nNG003027 -4.2922e-03 -1.5384e-07  3.9589e-05 -6.8215e-01         0.4951\nNG010019  3.2251e-01 -5.2377e-04  4.0046e-02  1.6142e+00         0.1065\nNG010020  6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00         0.0139\nNG001012  8.3329e-02 -1.4475e-04  1.8549e-02  6.1289e-01         0.5399\nNG012018  5.3675e-02 -1.7389e-04  2.2283e-02  3.6074e-01         0.7183\nNG003028  4.8583e-02 -5.4275e-05  8.3578e-03  5.3201e-01         0.5947\nNG007021  7.1148e-01 -9.2780e-04  1.7867e-01  1.6854e+00         0.0919\nNG001013  1.1053e-01 -3.5422e-04  3.8849e-02  5.6258e-01         0.5737\nNG001014 -3.1866e-01 -6.5588e-04  8.4006e-02 -1.0972e+00         0.2726\nNG010021  1.1424e-02 -2.3951e-06  4.6165e-04  5.3181e-01         0.5949\nNG001017  5.7671e-01 -7.1640e-04  7.8541e-02  2.0604e+00         0.0394\nNG001015  2.7894e-01 -5.6910e-04  6.2402e-02  1.1189e+00         0.2632\nNG001016  6.0619e-03 -3.3373e-07  5.1394e-05  8.4562e-01         0.3978\nNG020042  3.0813e-01 -7.6926e-04  6.5421e-02  1.2077e+00         0.2272\nNG017027  6.7941e-01 -1.4749e-03  1.6158e-01  1.6939e+00         0.0903\nNG003029 -1.1686e-02 -2.3951e-06  3.0697e-04 -6.6684e-01         0.5049\nNG003030  4.6362e-03 -2.3951e-06  3.6884e-04  2.4153e-01         0.8091\nNG007022  9.6682e-01 -2.9930e-03  3.8244e-01  1.5682e+00         0.1168\nNG035013  1.0961e+00 -1.2468e-03  3.2043e-01  1.9386e+00         0.0526\nNG010022  6.7907e-01 -1.0618e-03  1.6334e-01  1.6828e+00         0.0924\nNG003031 -7.6637e-03 -1.0903e-05  8.3406e-04 -2.6499e-01         0.7910\nNG014017  7.8882e-01 -1.5504e-03  1.4841e-01  2.0517e+00         0.0402\nNG007023  3.4338e-01 -1.2235e-04  1.8840e-02  2.5026e+00         0.0123\nNG034021  2.0732e-02 -1.2162e-05  1.0351e-03  6.4477e-01         0.5191\nNG026013  4.6167e-02 -5.4386e-06  8.3753e-04  1.5955e+00         0.1106\nNG020043 -2.1810e-04 -1.4475e-04  1.5879e-02 -5.8210e-04         0.9995\nNG005019  1.3116e-01 -4.0925e-05  7.8878e-03  1.4773e+00         0.1396\nNG010023  1.9287e-01 -3.2531e-04  2.7678e-02  1.1612e+00         0.2455\nNG010024  3.4420e-01 -2.0041e-04  2.5680e-02  2.1491e+00         0.0316\nNG010025  7.0914e-01 -1.1920e-03  1.8334e-01  1.6589e+00         0.0971\nNG022019 -7.6487e-02 -5.6029e-04  6.1436e-02 -3.0633e-01         0.7594\nNG032017  1.1859e-01 -6.6449e-05  1.0232e-02  1.1731e+00         0.2408\nNG020044 -8.0353e-03 -1.9868e-05  2.1798e-03 -1.7168e-01         0.8637\nNG035014  8.4291e-01 -2.5835e-03  2.8271e-01  1.5902e+00         0.1118\nNG034022  1.2249e-01 -3.6124e-04  6.9603e-02  4.6565e-01         0.6415\nNG027025  6.0254e-02 -6.0715e-04  6.6571e-02  2.3588e-01         0.8135\nNG034023 -6.1064e-02 -8.3203e-05  1.0663e-02 -5.9055e-01         0.5548\nNG023020  5.4543e-03 -1.5384e-07  1.6879e-05  1.3276e+00         0.1843\nNG023021  2.2042e+00 -1.2468e-03  1.3661e-01  5.9669e+00         0.0000\nNG009018  1.4624e+00 -6.3882e-03  9.7748e-01  1.4856e+00         0.1374\nNG009019  1.4254e+00 -4.4019e-03  4.2017e-01  2.2058e+00         0.0274\nNG016011  1.7873e+00 -6.7020e-03  7.3036e-01  2.0992e+00         0.0358\nNG018027 -1.1477e-01 -2.9456e-05  4.5360e-03 -1.7036e+00         0.0885\nNG022020 -3.4257e-01 -7.1640e-04  1.8422e-01 -7.9648e-01         0.4258\nNG006008  4.8213e-01 -6.6542e-04  8.5226e-02  1.6538e+00         0.0982\nNG002020  1.0412e+00 -1.4014e-03  5.4087e-01  1.4176e+00         0.1563\nNG002021  9.9111e-01 -1.1259e-03  1.7320e-01  2.3842e+00         0.0171\nNG035015  9.1919e-02 -5.1577e-05  6.6100e-03  1.1312e+00         0.2580\nNG036016  1.0843e+00 -1.6277e-03  3.1322e-01  1.9403e+00         0.0523\nNG036017  6.9180e-01 -1.2599e-03  1.9378e-01  1.5744e+00         0.1154\nNG005020  8.1963e-02 -1.0184e-04  1.1172e-02  7.7642e-01         0.4375\nNG021034 -5.1902e-01 -3.9905e-04  7.6885e-02 -1.8704e+00         0.0614\nNG019022 -5.5710e-01 -4.8031e-04  6.1529e-02 -2.2440e+00         0.0248\nNG019023  1.0395e+01 -1.1260e-02  2.1459e+00  7.1035e+00         0.0000\nNG035016 -2.5409e-01 -4.7222e-04  1.8243e-01 -5.9380e-01         0.5526\nNG037014 -2.3990e-02 -5.4386e-06  5.2141e-04 -1.0504e+00         0.2935\nNG022021 -1.4493e-01 -2.0041e-04  3.8621e-02 -7.3644e-01         0.4615\n\n\nFrom the plot, we can see that local Moran’s I has similar results as above, Moran’s I value is more and more approaching to 0, and the observations will be more randomly over the study area.\n\n\nMapping local Moran’s I p-values\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nnga_wp.localMI_wp <- cbind(nga_wp,localMI_wp) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(nga_wp.localMI_wp) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(nga_wp.localMI_wp) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI_wp.map <- tm_shape(nga_wp.localMI_wp) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue_wp.map <- tm_shape(nga_wp.localMI_wp) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI_wp.map, pvalue_wp.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFrom the above 2 maps, we can see that areas with local Moran’s I p-values less than 0.05, have higher clusters of non-functional water points. there is an inverse relationship between the 2 maps."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of Non-Functional water points by using moran.plot() of spdep.\n\nnci_wp <- moran.plot(nga_wp$`wpt non-functional`, wp_rswm_q,\n                  labels=as.character(nga_wp$ADM2_EN), \n                  xlab=\"Non-Functional Water Points\", \n                  ylab=\"Spatially Lag Non-Functional Water Points\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high number of non-functional water points and are surrounded by other areas that have high number of non-functional water points. This are the high-high locations.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nnga_wp$Z.NF_WP <- scale(nga_wp$`wpt non-functional`) %>%\n  as.vector\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci_wp2 <- moran.plot(nga_wp$Z.NF_WP, wp_rswm_q,\n                   labels=as.character(nga_wp$ADM2_EN),\n                   xlab=\"z-Non-Functional Water Points\", \n                   ylab=\"Spatially Lag z-Non-Functional Water Points\")\n\n\n\n\nAbove scatterplot is with standardized values, this shows the average value of its neighbours’ non-functional water points.\n\n\nPreparing LISA map classes\nThe code chun below show the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI_wp))\n\nNext, derives the spatially lagged variable of interest (i.e. Non-Functional water points) and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_NF_wp <- lag.listw(wp_rswm_q, nga_wp$`wpt non-functional`)\nDV_wp <- nga_wp$lag_NF_wp - mean(nga_wp$lag_NF_wp)   \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_wp <- localMI_wp[,1] - mean(localMI_wp[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05   \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV_wp <0 & LM_I_wp>0] <- 1\nquadrant[DV_wp >0 & LM_I_wp<0] <- 2\nquadrant[DV_wp <0 & LM_I_wp<0] <- 3  \nquadrant[DV_wp >0 & LM_I_wp>0] <- 4  \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI_wp[,5]>signif] <- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nnga_wp.localMI_wp$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_wp <- tm_shape(nga_wp.localMI_wp) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\nLISAmap_wp\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ntmap_arrange(wp_nonfunctional, LISAmap_wp, \n             asp=1, ncol=2)\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\ntmap_arrange(localMI_wp.map, pvalue_wp.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nComparing the 4 graphs, in the LISAmap_wp, places with Local Moran’s I p-values < 0.05, it has shown colours, meaning there are spatial patterns of clusters and outliers. Similarly in the LISAmap_wp, clusters of non-functional water points (in red) are the areas in green in local Moran’s I map. These presents that the computed index values are of statistical significance."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBesides the above clusters and outliers found, it can also be used to detect hot spot and/or cold spot areas.\n\nGetis and Ord’s G-Statistics\nThis section of analysis consists of the below three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi Statistics\n\n\n\nDeriving distance-based weight matrix\nThere are two types of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe need points to associate with each polygon before making the connectivity graph. From the below code chunk, we are able to get the values for longitudes, latitudes and finally combine them into the same object.\n\nlongitude_wp <- map_dbl(nga_wp$geometry,~st_centroid(.x)[[1]])\nlatitude_wp <- map_dbl(nga_wp$geometry,~st_centroid(.x)[[2]])\ncoords_wp <- cbind(longitude_wp,latitude_wp)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1_wp <- knn2nb(knearneigh(coords_wp))\nk1dists_wp <- unlist(nbdists(k1_wp,coords_wp, longlat = FALSE))\nsummary(k1dists_wp)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 72139 m, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d72139 <- dnearneigh(coords_wp, 0, 72139, longlat = FALSE)\nwm_d72139\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18130 \nPercentage nonzero weights: 3.026327 \nAverage number of links: 23.42377 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm72139_lw <- nb2listw(wm_d72139, style = 'B')\nsummary(wm72139_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18130 \nPercentage nonzero weights: 3.026327 \nAverage number of links: 23.42377 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9 11 22 32 35 33 34 29 35 27 18 21 23 16 12 12 11 16 17 16 10 14 10  5 13 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  5 15 13 12  7 10  8 12  5 12 17 14  9 10  4  5  3  7  6 11  8  5  5  4  2 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  3  6  3  5  6  2  5  5  8  6  6  4  3  1  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 70 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 774 599076 18130 36260 2622544\n\n\n\n\nComputing adpative distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn_wp <- knn2nb(knearneigh(coords_wp, k=8))\nknn_wp\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw_wp <- nb2listw(knn_wp, style = 'B')\nsummary(knn_lw_wp)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11154 201940"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi Statistics using fixed distance\n\ngi.fixed_wp <- localG(nga_wp$`wpt non-functional`,wm72139_lw)\ngi.fixed_wp\n\n  [1] -3.4117746649 -3.4325327295 -1.5896654726  0.1024035837 -1.4372020951\n  [6]  2.8392431096 -1.2451608781 -2.0881598529  0.6943166939 -4.1357148773\n [11] -3.5543643584  0.7028327021  1.0557642518 -1.2648020444 -3.1100102991\n [16]  4.4236791649  0.7253370351 -0.1170313444 -0.8468860707  0.1418378466\n [21] -0.4444525907 -2.5787439152 -5.9408386919  0.0490221299 -4.6250101263\n [26] -3.4526479798 -3.2842327545  2.6307586789  3.1531206419  3.9017827701\n [31] -0.3901172116 -2.0709442943 -0.1348087246  2.5315321685  0.4465304476\n [36]  2.8157847314  2.0572944746  2.3429395384  2.1827306253  1.9238345799\n [41]  2.1897325824 -0.3645157327 -3.8639919963  4.5399631849  4.3061500016\n [46]  2.9608766578 -0.2864102817  1.1746065746 -2.8181694612  3.0318488026\n [51] -2.3715234853 -5.9628191057 -4.8665465676 -5.9978486948 -2.1521995859\n [56] -2.6990377972 -4.1095164521 -4.2582561763  0.1434597247 -1.4480552039\n [61] -0.3664736626 -2.0660238126  1.3560050446  1.1941723552  0.6520255991\n [66] -0.7061126715  5.3705428742 -3.9654078235 -2.8742418968  4.4607142525\n [71]  5.9817295202  0.3589544407 -0.0717557313 -0.2146512615  1.2805963197\n [76]  2.5430378175 -4.3209911455 -6.1864779959 -6.3091804665 -5.2074212405\n [81]  1.5724065864 -3.0134148246 -1.6605766843  2.1372905711 -1.9370094219\n [86]  0.5351722462  0.7781339095 -0.0991617191  0.0206765657  1.6845537280\n [91] -1.9481984678  2.4106784274 -0.1209884988 -0.0294216102  1.2014584129\n [96]  0.5487724545  0.5230691396 -1.0049421880  2.2086577453  0.6860104564\n[101] -0.8358802808  3.3934885075 -2.5915246147  0.7361865356 -1.3919152488\n[106]  1.6857908883  3.3349825302  1.4948688424 -0.6649376028  0.1049808942\n[111]  0.1797402897 -0.2296312591  1.5924606930 -0.4220300892 -2.4843821512\n[116] -0.5403453732  2.4425124231  3.1901956500  3.7026209747  5.7708188247\n[121] -2.9992528883 -2.8867680713  0.1450845287  5.6181447864  0.1300463875\n[126] -1.4642795114  0.1064214435  0.2019905157 -0.3933126058 -1.0687092481\n[131]  1.1862683742 -1.2897330306  2.0774178384 -2.7261489805  1.1595913792\n[136]  0.0590529868  0.0415312576 -0.1479027888  0.2286220369 -1.8068739793\n[141]  1.8128875616 -1.8465165657 -1.9263347704 -0.1217435299  0.1562862363\n[146] -2.0483697898 -0.1728823598  1.1206769217  2.2828808379 -1.2897776976\n[151]  2.4167160591  0.3088772578 -0.1569586843  1.5067812784 -1.4232058416\n[156] -1.3192224285 -3.7789524190 -1.1745401808 -1.6603243945 -2.5183861649\n[161]  0.0497131757  0.5395983509  2.4584177542  1.7817721289 -5.8940988934\n[166]  0.5616363675  1.6014174947 -0.7737526146 -1.8608470741  1.2807175799\n[171]  1.8546118600  5.6507070121  4.9899574161  3.8565952505  5.4648235612\n[176] -0.6763153032 -2.1820247405  1.1201091686  5.1137113602 -1.0998628514\n[181] -4.9652045029  3.5387758960 -2.3886751887 -0.4653196107  4.1348276862\n[186]  3.5932572298  3.8543059497  5.2228382133 -5.6296206205 -2.9734659505\n[191] -3.8503251289  3.5127403382 -2.4310631930 -3.0070376123 -3.2384084218\n[196] -3.0486056593 -2.0595597139 -2.5844113063 -3.5641507085 -1.7577329410\n[201]  0.3786055236 -0.5079560968 -1.9294510731 -3.7986404726 -2.7848792901\n[206] -2.5102897931 -1.9939528637 -2.3691669213 -0.9886885003 -2.0151263289\n[211] -0.9581884502 -0.7245577589  3.5470212834 -2.4820784778 -5.6010575750\n[216] -4.0749852290  0.3576511087  0.2927426140 -1.6443111430  0.8302229411\n[221] -0.5062515700 -0.1547202287 -2.4843821512  1.0086589118 -2.1770380403\n[226]  2.4626146208  0.0440638219  0.1920286012  1.3983932449 -0.8496076016\n[231] -0.6691384516 -1.2911170263  1.5345894073 -0.5529326952 -1.5457781106\n[236] -1.0324483227  1.1200463362 -0.0620637069  0.4247713032  2.0054718680\n[241] -1.4942460433 -1.1521974135 -0.2921554734 -2.4950665627  3.5976949011\n[246] -2.7962939270  4.8434048492 -2.5148770948 -1.1267981706 -2.2240242508\n[251] -0.2630217751 -2.1970004876 -0.7730147072  0.6798537235  1.2492399224\n[256] -0.6888953395  0.8358603199  1.6654804315 -0.4827650151 -0.5433051006\n[261] -2.7605516416 -0.8707537202  0.0947302301 -2.0368588754  0.0696307201\n[266] -0.6203604939 -2.3237912877  0.3598097208  0.3526946680  1.4430576168\n[271] -1.8702382558 -0.1272890978 -2.2962397403 -2.7219828700  0.2521141177\n[276]  0.2110907859 -0.0140816269 -0.4035735646 -0.1936101468 -3.4726936093\n[281] -1.1266733840 -1.0891489463 -0.8054781266 -3.1021011147 -0.2258676440\n[286] -0.4264717884  1.5869426397 -0.6349762230 -1.8844344179  3.0598056534\n[291] -5.6709166021 -5.4830137576 -5.5819971667 -5.6384828208 -0.5824687042\n[296]  5.3088751125 -2.6487517374  5.7673863636  4.9440575555  3.7543412120\n[301]  4.2490060765  6.6608670387  3.8590463207  4.3840930783  4.6799452358\n[306] -2.6462032630  4.3397784922 -2.4054408070 -3.4238843779 -2.5120530221\n[311] -2.7147690002 -2.6317957384 -5.5485595954 -4.2448418644  1.3083580350\n[316] -0.0008175288 -0.5453801285 -2.0157446995  4.7484630417  2.6229111706\n[321] -2.5261266494 -3.2713201180 -2.9903547011  1.6380043965 -4.6631468209\n[326] -2.3492073446 -3.3004858380  4.4178197031  4.0780178934  3.5616720390\n[331] -1.2136320131 -2.7979941928 -2.0118940444 -1.5111729044 -2.2358982231\n[336] -3.9541762690  2.0820588544 -2.6099148033  6.6557659546  1.0903162691\n[341]  4.4835629508  6.0629547434  6.0427221000  6.1036461610 -1.0477720725\n[346]  6.6228782572  4.9953238917  5.1302151080  0.5368152260  1.0651968009\n[351] -0.8283153141 -2.4311349096  0.8470591553  0.3745724752  5.5209564889\n[356]  5.4927540484  5.2676551986  2.0959129929 -0.6275540802  4.1792561383\n[361] -0.0590747566 -1.4318034953 -1.8389648967 -3.7859879826 -3.7817839487\n[366] -5.4245454867  5.8696037200 -4.6411506929  1.6117911279 -2.6522843897\n[371] -2.9391365455 -5.4894734274  0.8980569535  0.1738054683 -0.1017873640\n[376] -2.9644127980 -0.3483319452  2.5906642146  2.5757689632  2.8049352195\n[381] -1.8542483216  0.4788736337  0.3119912756  0.9113252618 -1.0636046195\n[386]  1.2128128576  2.3166975797 -2.4409676368  1.3341470252  1.2361156601\n[391]  2.1848914329  1.9356540658  1.1829505160 -2.1398569553  1.5986911707\n[396]  3.5405748932  4.2315968938  1.4478008085  0.7997941089 -2.4579198656\n[401]  1.7729143861 -0.2688161324  1.1759997435 -0.4785272245  0.0824185174\n[406] -1.9481984678  1.8474148195  2.0216768147  0.6370561918 -1.0801487314\n[411]  1.8849519770 -0.4439225392 -2.1627301474 -0.9568239420 -2.1208906249\n[416]  1.9959594097  1.8550481979  0.0768132901  0.6124793401  1.3560776058\n[421]  2.3411474563  1.5216483269  2.8604474525 -0.5765991732  1.1856817116\n[426]  0.8921599476  0.9184331234  1.0249162410  1.3154778076 -2.2722342410\n[431] -0.7116331447  1.6931894763  0.6730570517 -1.1800027342 -0.5199578683\n[436]  0.4808652570 -0.0235257009  0.8165479237 -3.0529318612 -2.0225625108\n[441]  2.9455769746  0.2363832344 -2.2768267875  0.3466223084  3.2255102937\n[446]  0.1411952313 -1.9481984678 -2.1661859263 -0.4676066168 -1.6782098794\n[451] -0.0777842289  1.4868205720 -0.3505589498 -0.1726887164  3.8745989532\n[456]  2.7346136617 -0.9465537461 -0.8931548108  1.3012749110  1.5028765507\n[461] -2.2932985630 -2.2505626380  0.7936258264  2.4032040546  2.3557037349\n[466]  0.1826814641  0.1072325498  1.2844732698 -0.8760327358  1.7752129147\n[471]  0.2516184985  1.2342409373 -2.0753935530 -1.8558057677 -2.5640880571\n[476] -0.2895493962 -2.0222513579  1.9291991379 -2.0461307940  1.7044807663\n[481] -2.1018239835  2.2216843179 -0.0429522457  0.4370541700  1.0787307424\n[486] -0.8407609199  2.7630963689  1.3973854719 -1.0153143497  0.3214749983\n[491]  2.0826454414 -2.2510480140 -0.9777552530 -0.2462903412  1.3294858918\n[496] -1.1545484236 -1.5476742545 -5.2094566914  0.0549402737 -2.6381224548\n[501]  1.2684806683  3.0942547654 -0.1945298933 -0.3139665937 -1.4312402705\n[506]  6.0035680834 -1.5896654726  1.7438033643 -2.7605516416  3.6248484270\n[511]  3.2842322630 -2.5504783218 -2.2884473891 -1.2742029215 -2.1794770390\n[516] -0.9452868662  0.9226508131 -0.2808815183 -1.3017627523  0.1028146689\n[521]  0.7903470822 -4.7773019724 -4.0599839099 -2.8929329559 -2.2510480140\n[526] -2.5436200487  0.5572826624 -4.0077436082  0.5743933705  0.7561771796\n[531] -5.4711387856 -5.9881769115 -1.7097095914 -3.2145613317 -5.4921528592\n[536] -5.6065224752 -5.8927691095 -0.5158206706 -0.6169568186 -0.3646687228\n[541] -3.1236269572 -0.6335776619 -5.7248166602 -2.7991201431  3.1510854408\n[546]  0.8119571110  1.5362711705 -3.3968533218 -3.8153771055  5.9423980975\n[551] -2.1187346870 -3.8748698800  2.7449840241  3.5912450649 -1.5471567880\n[556]  1.1545459720  4.7634173376 -3.2694968198 -0.1539058338  5.4349953766\n[561] -1.4215986299 -4.1250618121 -2.1372786039 -5.4053629216 -3.3734475553\n[566]  3.1846656426  3.3148834211  2.8896814604  3.1830364814  2.1415338074\n[571] -2.6827643843  1.3599575208 -5.5189330179 -0.3658278560 -4.8168371931\n[576] -1.0570272459 -0.2384946211 -1.1607522581 -5.6452073745 -2.2576555531\n[581]  1.7975786222  4.6952651933  1.4302665280  1.3989314523 -5.3349149523\n[586]  1.4675795928 -0.2318308926 -2.7751843183 -1.2798894874 -3.2243185582\n[591]  3.7238463041 -1.9040602801  5.3597510246  0.3377758326 -0.6590453290\n[596]  0.5564706605 -3.6996922635  0.2560104627  4.2395964721  3.9198676182\n[601] -0.7367636763 -5.4524005156 -5.3185082518 -0.8488602190 -1.9028377268\n[606] -1.0064673530 -0.3045753085 -2.8225903216  2.5443505078  4.6794907143\n[611] -5.7372577835  5.3162941702  0.0533854848 -5.5653175208 -5.4554505787\n[616] -5.3342170944 -2.0355539983 -6.2184435395 -5.6475542692  1.4165917345\n[621] -4.8095950608 -5.3585676554 -2.4123005609 -3.7802073197  5.7231828185\n[626] -0.4207639553 -0.0820196887  0.4913428569  1.9668518061  1.0669220785\n[631] -4.3830103212 -4.0535150724 -4.2297431678  2.9774246125  4.2206187107\n[636] -5.8592562511 -2.6995188099  1.5314942716 -0.0111640361  4.9598342782\n[641] -0.8975285513  3.2695447281 -3.3804769565  1.0233101789 -3.3797348722\n[646]  0.6090977147  2.9539283043 -1.1786140304 -0.0727091531 -0.8216517560\n[651] -2.6810951026  0.2470088329  1.2742462639 -1.9488365342  1.0167687803\n[656]  2.4696394873  0.9420722071  0.4885664676  3.1287725372 -0.9497319744\n[661]  2.4425891604 -0.2105136963 -3.5070892894  0.8476063553 -0.4188028499\n[666] -0.1801619339  2.1839721672  2.9349648477 -2.3517158696  0.6303115465\n[671] -2.9726649671 -0.3251973156  0.5816313363 -0.3216700089 -1.8966498040\n[676] -2.4477520834  2.1462680474 -0.7007776964 -0.2901563432 -0.6294507710\n[681]  3.1848222332 -2.2628381729 -0.1928257328  3.7543250494 -0.6898963477\n[686] -0.4579363450 -2.8263574815 -1.9107113505  1.9767736485  1.3356841113\n[691] -0.1992862573  2.1555107134 -2.1759945372  3.8196059687  1.3667153170\n[696]  1.5606747950 -2.8180979983  0.1258362477  1.6362250633 -1.1755606793\n[701]  0.0556083826 -0.6254612030 -1.8245553490  1.7673690255 -1.7099082238\n[706]  0.5061058989 -1.8322536644 -0.4720914115  1.2302888089 -0.2537342611\n[711] -1.0194530184 -1.4775673577 -0.0896050089 -1.1801300237 -2.3509568161\n[716] -4.6307512034 -2.7407326147 -0.0025370071 -3.0988099215 -3.1167461569\n[721] -3.4662013761 -1.4743456301 -1.9718471619  2.1607674145 -2.9497681287\n[726] -3.3579719453 -3.6200569828 -4.8364896839 -3.6643604569 -3.4079170777\n[731] -1.2277114161 -5.4597614286  0.0712972970 -0.1507192365  2.3528477525\n[736]  1.8167556955 -2.5958296857 -0.4791719568 -3.9373952476  4.0454927846\n[741] -0.8497222111  4.1914248594 -1.3905853881 -1.1087182179 -1.5160448019\n[746] -2.6117513854 -2.7085894788  0.0867810375  1.8316046394 -1.3189997474\n[751]  0.6456167365 -0.8342620760 -0.2755550651 -0.1319774555  3.8329382654\n[756]  3.9433436976  1.4629084755  2.5181371643  2.4671867473  1.4737976377\n[761]  1.0618293805 -3.2385810885 -2.9516603752 -2.9891644936  0.2150638765\n[766] -1.2461555271 -0.1547825213  0.7644963108  2.3956916991  3.1096694186\n[771]  3.4527292514 -0.9854012267 -1.0503779238  0.1911170626\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n [16] High Low  High Low  High High Low  Low  High Low  Low  Low  High High High\n [31] Low  Low  Low  High High High Low  High High High High High Low  Low  Low \n [46] High High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  High Low  High Low  High Low  Low  High High Low  High Low  High\n [76] Low  Low  Low  Low  Low  High High High Low  High Low  Low  Low  High High\n [91] Low  High High High High High High Low  High Low  Low  High Low  High High\n[106] Low  High High High High Low  High Low  Low  Low  High Low  High High High\n[121] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  High\n[136] Low  High Low  High Low  Low  High Low  High High Low  Low  High High Low \n[151] Low  High Low  High High Low  Low  High Low  Low  High Low  High High Low \n[166] Low  Low  High Low  Low  High High Low  High Low  Low  Low  Low  High Low \n[181] Low  High Low  Low  High Low  High High Low  Low  Low  Low  Low  Low  Low \n[196] High Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  Low \n[211] Low  Low  High Low  Low  Low  High High Low  Low  High Low  Low  High Low \n[226] Low  Low  Low  Low  High Low  Low  High Low  High High High Low  High High\n[241] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High\n[256] Low  Low  Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[271] Low  High Low  Low  Low  High Low  Low  Low  Low  High Low  High High Low \n[286] Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  High High High\n[331] Low  High Low  Low  Low  Low  High High High Low  High Low  High High High\n[346] Low  Low  High Low  Low  Low  Low  High Low  High High Low  High Low  Low \n[361] Low  High High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  High\n[376] Low  High High Low  High Low  Low  Low  High Low  High High Low  Low  High\n[391] Low  High Low  Low  High High Low  Low  Low  Low  High High High High Low \n[406] Low  High High High Low  High Low  High Low  High High High Low  Low  High\n[421] High Low  High Low  High High Low  Low  Low  Low  Low  Low  High High High\n[436] High High High Low  Low  High Low  Low  Low  High High Low  Low  Low  High\n[451] High High Low  High High High High Low  High High Low  Low  Low  High Low \n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  High\n[481] Low  High Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[496] High Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  High\n[511] High Low  Low  Low  Low  High High Low  High High High High Low  Low  Low \n[526] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High\n[541] Low  Low  Low  Low  High High High High High High High Low  High High Low \n[556] High High Low  High High Low  Low  Low  Low  Low  Low  High High High Low \n[571] Low  Low  High Low  High High High Low  Low  Low  Low  High High High Low \n[586] High High Low  Low  Low  Low  Low  High Low  Low  Low  Low  High High High\n[601] High Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  Low  Low \n[616] Low  High Low  Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[631] Low  Low  Low  High High Low  Low  Low  Low  High Low  High Low  High Low \n[646] Low  High Low  Low  Low  Low  High Low  Low  Low  High High High High High\n[661] Low  Low  High High Low  High High High Low  Low  High Low  High Low  Low \n[676] Low  High Low  High Low  High Low  Low  High Low  Low  Low  Low  High Low \n[691] High High Low  High Low  Low  Low  High High High High Low  Low  High Low \n[706] High Low  Low  High Low  High High High High Low  Low  Low  High Low  Low \n[721] High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[736] High Low  High Low  High Low  High High Low  Low  Low  Low  High High Low \n[751] High Low  High High High High High High High Low  Low  Low  Low  Low  High\n[766] Low  Low  High Low  Low  High High High Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm72139_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, we will join the Gi values to their corresponding Nigeria sf data frame by using the code chunk below.\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed_wp)) %>%\n  rename(gstat_fixed_wp = as.matrix.gi.fixed_wp.)\n\nThe code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nga_wp.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\nGimap_wp <-tm_shape(nga_wp.gi ) +\n  tm_fill(col = \"gstat_fixed_wp\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wp_nonfunctional, Gimap_wp, \n             asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed_wp\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFrom the Gi Map above, we can see that the hot spot area (i.e area with high number of non-functional water points) are situated across a large areas in the middle of Nigeria. The worst situation in the east side of the country, followed by the mid section, vertically down the country experiencing high number of non-functional water points.\n\n\nGi statistics using adaptive distance\n\ngi.adaptive_wp <- localG(nga_wp$`wpt non-functional`,knn_lw_wp)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive_wp)) %>%\n  rename(gstat_adaptive_wp = as.matrix.gi.adaptive_wp.)\n\n\n\nMapping Gi values with adaptive distance weights\n\nGimap_wp <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive_wp\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wp_nonfunctional, Gimap_wp, \n             asp=1, ncol=2)\n\nVariable(s) \"gstat_adaptive_wp\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nSimilar to the fixed distance weights Gi Map, the middle section of Nigeria also showing hot spot area across, however, some showing stronger Gi values. The adaptive distance weights Gi Map flagged several most severe areas in dark red to bring our attention to know that, resources in repairing the non-functional water points should be immediately brought to these locations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusions",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusions",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Conclusions",
    "text": "Conclusions\nAs stated in the start of this study, we want to visualize and understand the patterns of the non-functional water points in Nigeria. As mentioned in the Introduction, 60% of Nigerians do not have access to clean water.\nWater Stress is a serious issue that can give rise to many other social and health problems. From an article in News Security Beat (King & Spangler, 2017), there is a vicious cycle of weak governance and lack of proper water management. Weak governance causes poverty, lack of funds to fix and functional water points. These uneven distribution of clean water resources, causes a lot of violence and tensions in the society. Limited access to clean water also causes Nigerians especially their children to fall sick easily, accordingly to UNICEF.\nIn fact, Nigeria is one of the most water rich countries among other Africa countries, this article entails how Nigeria government is unable to properly manage, use and protect their water resources for socioeconomic development and environmental. Many Non-governmental organizations (NGOs) have stepped in to help to monitor and improve the current situation.\n\nWhy This Matters\nNigeria is also suffering from the climate change, coupled with limited fundings, the government should focus on repairing current substantial amount of non-functional water points (33% of total water points).\nThis study helps to visualize the clusters of non-functional water points by considering its geographical lags, weights and neighbours through various statistical packages in R. The visualizations could help Nigerian government or NGOs to easily identify the sub-districts with most serious water problems and allocate its resources in the most effective way.\nThis study ensures that the data is accurate and understandable for readers without much analytics or geographical experience so that organisations could easily take actions and to keep the readers in the loop.\n\n\nFuture Impact/Suggestions\nWith continuing concerns over water issues in Nigeria, the poor has actually been hit the worst. Other than the water points data, we could also look into the population or GDP distributions across the countries, to check if the identified clusters of non-functional water points are aligned with the population characteristics.\nWe could also load newer data whenever there is an update to examine if there is constant and progressive improvements of clusters of non-functional water points over a period of time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#acknowledgements",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#acknowledgements",
    "title": "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis analysis has referred heavily to the Chapter 4 of the learning resources prepared by Prof Kam Tin Seong as well as countless whatsapp messages from our lovely coursemates that have guided me to the right direction."
  }
]