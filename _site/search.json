[
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\n\nsf for importing and processing geospatial data,\ntidyverse for importing and processing non-spatial data. In this exercise, readr package will be used for importing wkt data and dplyr package will be used to wrangling the data.\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, funModeling)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-import",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-import",
    "title": "Take-home Exercise 2",
    "section": "Data Import",
    "text": "Data Import\nIn this study, two data sets will be used:\n\nImporting water point data\nFirst, we are going to import the water point data into R environment.\n\nwp_nga <- read_csv(\"aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 406566 Columns: 70\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (43): #source, #report_date, #status_id, #water_source_clean, #water_sou...\ndbl (23): row_id, #lat_deg, #lon_deg, #install_year, #fecal_coliform_value, ...\nlgl  (4): #rehab_year, #rehabilitator, is_urban, latest_record\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThing to learn from the code chunk above:\n\nThe original file name is called Water_Point_Data_Exchange_-_PlusWPdx.csv, it has been rename to WPdx.csv for easy encoding.\nInstead of using read.csv() of Base R to import the csv file into R, read_csv() is readr package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. New Georeferenced Column)\nThe data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, filter() of dplyr is used to extract out records belong to Nigeria only.\n\n\n\nConvert wkt data\nAfter the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.\nNotice that the newly imported tibble data frame (i.e. wp_nga) contains a field called New Georeferenced Column which represent spatial data in a textual format. In fact, this kind of text file is popularly known as Well Known Text in short wkt.\n\n\n\n\n\nTwo steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.\nFirst, st_as_sfc() of sf package is used to derive a new field called Geometry as shown in the code chunk below.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\n\nIf you open wp_nga data frame and scroll to the last field now, you will see a new field called Geometry has been added as shown below.\n\nNext, st_sf() will be used to convert the tibble data frame into sf data frame.\n\nwp_sf <- st_sf(wp_nga, crs=4326) \n\nWhen the process completed, a new sf data frame called wp_sf will be created.\n\n\n\nImporting Nigeria LGA level boundary data\nFor the purpose of this exercise, shapefile downloaded from geoBoundaries portal will be used.\n\nnga <- st_read(dsn = \"geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\chenfx91\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#point-in-polygon-overlay",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#point-in-polygon-overlay",
    "title": "Take-home Exercise 2",
    "section": "Point in Polygon Overlay",
    "text": "Point in Polygon Overlay\nAlthough wp_sf sf data frame consists of a field called #clean_adm2 which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.\nIn this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called point-in-polygon overlay to transfer the attribute information in nga sf data frame into wp_sf data frame.\n\nwp_sf <- st_join(wp_sf, nga)\n\nNotice that a new field called shapeName has been added into wp_sf sf data frame. as shown below."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nEDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of #status_clean & #water_tech_clean field in wp_sf.\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nfreq(data = wp_sf,\n     input = '#water_tech_clean')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n            #water_tech_clean frequency percentage cumulative_perc\n1                   Hand Pump     58720      61.81           61.81\n2             Mechanized Pump     25240      26.57           88.38\n3                        <NA>     10055      10.58           98.96\n4                    Tapstand       553       0.58           99.54\n5     Mechanized Pump - Solar       401       0.42           99.96\n6  Hand Pump - India Mark III        19       0.02           99.98\n7         Hand Pump - Afridev         7       0.01           99.99\n8   Hand Pump - India Mark II         7       0.01          100.00\n9    Mechanized Pump - Diesel         3       0.00          100.00\n10           Hand Pump - Mono         1       0.00          100.00\n11      Hand Pump - Rope Pump         1       0.00          100.00\n12            Rope and Bucket         1       0.00          100.00\n\n\n\nsummary(wp_sf$usage_capacity)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   50.0   300.0   300.0   488.6  1000.0  1000.0 \n\n\n\nfreq(data = wp_sf,\n     input = 'is_urban')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n  is_urban frequency percentage cumulative_perc\n1    FALSE     75444      79.41           79.41\n2     TRUE     19564      20.59          100.00\n\n\n\n\nExtracting Water Point Data\n\nwpt_functional <- wp_sf %>%\n  filter(`#status_clean` %in%\n           c('Functional',\n              'Functional but not in use',\n              'Functional but needs repair'))\n\nwpt_nonfunctional <- wp_sf %>%\n  filter(`#status_clean` %in%\n           c('Non-Functional',\n             'Non-Functional due to dry season',\n             'Abandoned/Dcommissioned',\n             'Abandoned',\n             'Non functional due to dry season'))\n\nwpt_handpump <- wp_sf %>%\n  filter(`#water_tech_clean` %in%\n           c('Hand Pump',\n             'Hand Pump - India Mark III',\n             'Hand Pump - India Mark II',\n             'Hand Pump - Afridev',\n             'Hand Pump - Rope Pump',\n             'Hand Pump - Mono'))\n\nwpt_usageless1000 <- wp_sf %>%\n  filter(`usage_capacity` %in%\n           0:999)\n\nwpt_rural <- wp_sf %>%\n  filter(is_urban %in%\n           c('FALSE'))\n\n\n\nPerforming Point-in Polygon Count\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nnga_derived <- nga %>%\n  mutate('total wpt' = lengths(st_intersects(nga,wp_sf))) %>%\n  mutate('functional wpt' = lengths(st_intersects(nga,wpt_functional))) %>%\n  mutate('nonfunctional wpt' = lengths(st_intersects(nga,wpt_nonfunctional))) %>%\n  mutate('handpump wpt' = lengths(st_intersects(nga,wpt_handpump))) %>%\n  mutate('usageless1000 wpt' = lengths(st_intersects(nga,wpt_usageless1000))) %>%\n  mutate('rural wpt' = lengths(st_intersects(nga,wpt_rural)))\n\n\n\nSaving the Analytical Data Table\n\nclass(nga_derived$`functional wpt`)\n\n[1] \"integer\"\n\n\n\nnga_derived <- nga_derived %>%\n  mutate(`pct_functional` = `functional wpt`/`total wpt`) %>%\n  mutate(`pct_nonfunctional` = `nonfunctional wpt`/`total wpt`) %>%\n  mutate(`pct_handpump` = `handpump wpt`/`total wpt`) %>%\n  mutate(`pct_usageless1000` = `usageless1000 wpt`/`total wpt`) %>%\n  mutate(`pct_rural` = `rural wpt`/`total wpt`)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#exploratory-data-analysis",
    "title": "Take-home Exercise 2",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nEDA using statistical graphics\n\nFunctionalwp <- ggplot(nga_derived, \n                  aes(x=`functional wpt`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nNonFunctionalwp <- ggplot(nga_derived, \n                  aes(x=`nonfunctional wpt`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nPctFunctionalwp <- ggplot(nga_derived, \n                  aes(x=`pct_functional`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nPctNonFunctionalwp <- ggplot(nga_derived, \n                  aes(x=`pct_nonfunctional`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nPctHandpump <- ggplot(nga_derived, \n                  aes(x=`pct_handpump`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nPctusageless1000 <- ggplot(nga_derived, \n                  aes(x=`pct_usageless1000`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\nPctRural <- ggplot(nga_derived, \n                  aes(x=`pct_rural`)) +\n       geom_histogram(bins=20, \n                      color=\"black\", \n                      fill=\"light blue\")\n\n\nggarrange(Functionalwp, NonFunctionalwp, PctFunctionalwp, PctNonFunctionalwp,\n          PctHandpump, Pctusageless1000, PctRural,\n          ncol = 3, \n          nrow = 2)\n\nWarning: Removed 13 rows containing non-finite values (stat_bin).\nRemoved 13 rows containing non-finite values (stat_bin).\nRemoved 13 rows containing non-finite values (stat_bin).\nRemoved 13 rows containing non-finite values (stat_bin).\nRemoved 13 rows containing non-finite values (stat_bin).\n\n\n$`1`\n\n\n\n\n\n\n$`2`\n\n\n\n\n\n\nattr(,\"class\")\n[1] \"list\"      \"ggarrange\"\n\n\n\n\nEDA using choropleth map"
  }
]