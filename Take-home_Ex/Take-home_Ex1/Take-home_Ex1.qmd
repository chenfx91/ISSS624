---
title: "Take-home Exercise 1: Analysing and Visualising Spatial Patterns of Non-Functional Water Points"
editor: visual
---

## Overview

### Background

Water is a scarce resource especially for developing countries and Nigeria is one of them. According to an [article](https://www.downtoearth.org.in/news/africa/water-africa-s-gold-how-poverty-exacerbated-nigeria-s-acute-water-crisis-81416#:~:text=The%20crisis%20is%20compounded%20by,water%2Dborne%20diseases%20like%20cholera.) from DowntoEarth.org in 2022, more than 60% of the Nigeria's population do not have access to potable water, and people live in urban slums or rural parts of the countries both have difficulties in getting proper supply of water.

In order to understand the severity of the situation, we want to deep dive into the sub-district levels of data *(AMD2)* and visualise the spatial patterns of the water points, with focus on the *non-functional* ones, in Nigeria.

### The analytical question

As we know that Nigeria have serious issues with their water supply, we need to answer the below questions for this analysis on the non-functional water points:

-   Are water points evenly distributed in Nigeria? if the answer is **No**. then,

-   Is there sign of spatial clustering? if the answer is Yes. then,

-   Where are these clusters?

## Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   **sf**: used for importing, managing, and processing geospatial data

-   **tidyverse**: a collection of packages for data science tasks

-   **tmap**: used for creating thematic maps, such as choropleth and bubble maps

-   **spdep**: used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   **funModeling**: used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## Importing Geospatial Data

Two geospatial data sets will be used, they are:

-   geo_export

-   nga_admbnda_adm2_osgof_20190417

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.

```{r}
#| eval: false
wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

-   `st_read()` of **sf** package is used to import *geo_export* shapefile into R environment and save the imported geospatial data into simple feature data table.

-   `filter()` of dplyr package is used to extract water point records of Nigeria.

> Be warned: Avoid performing transformation if you plan to use `st_intersects()` of **sf** package in the later stage of the geoprocessing. This is because `st_intersects()` only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)

Next, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.

```{r}
#| eval: false
wp_nga <- write_rds(wp,
                    "geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

```{r}
nga <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   `st_read()` of **sf** package is used to import *nga_admbnda_adm2_osgof_20190417* shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle,"unknown"))
```

### EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* field.

### Extracting functional water point

In the code chunk below, `filter()` of dplyr is used to select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-functional water point

In the code chunk below, `filter()` of dplyr is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

From the above bar charts, we can see there are shocking amount of non-functional water points (33%) across Nigeria.

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with unknown class

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.

-   to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

## Visualising the spatial distribution of water points

Note that there are three Projected Coordinate Systems of Nigeria, namely, EPSG: 26391, 26392, and 26303. We will need to check the current source data on its Coordinate system and do the transformation if necessary, this could be achieve from the code chunk below.

```{r}
st_crs(nga_wp)
```

From the print above, we can see that the EPSG code is wrong (currently is 4326), we need to transform it to the correct code to the *nga_wp* data frame, *st_transform()* of **sf** package is used as shown in the code chunk below.

```{r}
nga_wp <- st_transform(nga_wp,
                       crs = 26391)
st_crs(nga_wp)
```

```{r}
#| fig-width: 14
#| fig-height: 12
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

From the above graphs, we can see that in the northern part of the country, we can see more functional water points while in the central and east sides, there are more non-functional water points. However, it is not enough to identify which areas are the most serious and requires most immediate attentions and actions. Below spatial analysis is conducted to find out such areas.

## Global Spatial Autocorrelation

### Computing Contiguity Spatial Weights

```{r}
wp_wm_q <- poly2nb(nga_wp,
                    queen = TRUE)
summary(wp_wm_q)
```

The summary report above shows that there are 774 area units in Nigeria. The most connected area unit has 14 neighbours. There are two area units with only one neighbours. There is 1 regoin with no links.

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

From the above, we know that there is one area has no neighbours, hence, the below code chunk includes codes to exclude the region with no links.

```{r}
wp_rswm_q <- nb2listw(wp_wm_q,
                      style = "W",
                      zero.policy = TRUE)
print(nb2listw(neighbours = wp_wm_q, zero.policy = TRUE), zero.policy = TRUE)
get.ZeroPolicyOption()
set.ZeroPolicyOption(TRUE)
get.ZeroPolicyOption()
wp_rswm_q
```

### Global Spatial Autocorrelation: Moran's I

### Maron's I test

The Null Hypothesis:

The non-functional water points are randomly distributed in Nigeria

```{r}
moran.test(nga_wp$`wpt non-functional`, 
           listw=wp_rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

From the p-value \<2.2e-16, we reject the null hyphothesis at 95% significant level, and conclude that there is spatial pattern of non-functional water points in Nigeria. From the Moran I (Z value) is positive, we can conclude that there are clusters of non-functional water points in Nigeria.

#### Computing Monte Carlo Moran's I

Conducting Monte Carlo Stimulation to further confirm on Moran's I test.

```{r}
set.seed(1234)
wp_nf_bperm= moran.mc(nga_wp$`wpt non-functional`, 
                listw=wp_rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
wp_nf_bperm
```

From the above simulation, p-value = 0.001, we can confirm that the null hyphothesis is rejected at 95% significant level.

#### Visualising Monte Carlo Moran's I

The code chunk below shows the distribution of the statistical values of the simulated Moran's I test as a histogram.

```{r}
mean(wp_nf_bperm$res[1:999])
```

```{r}
var(wp_nf_bperm$res[1:999])
```

```{r}
summary(wp_nf_bperm$res[1:999])
```

```{r}
hist(wp_nf_bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

From the histogram output above, we can see that the distribution follows a normal distribution with an outlier.

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when we increase the distance (lag) between them.

### Compute Moran's I correlogram

In the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of non-functional water points in Nigeria. The global spatial autocorrelation used in Moran's I. The plot() of base Graph is then used to plot the output.

```{r}
MI_corr_wp <- sp.correlogram(wp_wm_q, 
                          nga_wp$`wpt non-functional`, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr_wp)
```

```{r}
print(MI_corr_wp)
```

From the above correlogram, we can see that with the lags increases, Moran's I value is more and more approaching to 0, and the observations will be more randomly over the study area.

## Cluster and Outlier Analysis

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. In this section, we will apply LISA by using local Moran's I to detect cluster and/or outlier for the non-functional water points in Nigeria.

### Computing local Moran's I

```{r}
fips_wp <- order(nga_wp$ADM2_EN)
localMI_wp <- localmoran(nga_wp$`wpt non-functional`, wp_rswm_q)
head(localMI_wp)
```

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
table(duplicated(nga_wp$ADM2_EN))


printCoefmat(data.frame(
  localMI_wp[fips_wp,], 
  row.names=nga_wp$ADM2_PCODE[fips_wp]),
  check.names=FALSE)
```

From the plot, we can see that local Moran's I has similar results as above, Moran's I value is more and more approaching to 0, and the observations will be more randomly over the study area.

### Mapping local Moran's I p-values

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.

```{r}
nga_wp.localMI_wp <- cbind(nga_wp,localMI_wp) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping local Moran's I values

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
tm_shape(nga_wp.localMI_wp) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### Mapping local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

```{r}
tm_shape(nga_wp.localMI_wp) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### Mapping both local Moran's I values and p-values

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
localMI_wp.map <- tm_shape(nga_wp.localMI_wp) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue_wp.map <- tm_shape(nga_wp.localMI_wp) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI_wp.map, pvalue_wp.map, asp=1, ncol=2)
```

From the above 2 maps, we can see that areas with local Moran's I p-values less than 0.05, have higher clusters of non-functional water points. there is an inverse relationship between the 2 maps.

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of Non-Functional water points by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci_wp <- moran.plot(nga_wp$`wpt non-functional`, wp_rswm_q,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Non-Functional Water Points", 
                  ylab="Spatially Lag Non-Functional Water Points")
```

Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high number of non-functional water points and are surrounded by other areas that have high number of non-functional water points. This are the high-high locations**.**

### Plotting Moran scatterplot with standardised variable

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
nga_wp$Z.NF_WP <- scale(nga_wp$`wpt non-functional`) %>%
  as.vector
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci_wp2 <- moran.plot(nga_wp$Z.NF_WP, wp_rswm_q,
                   labels=as.character(nga_wp$ADM2_EN),
                   xlab="z-Non-Functional Water Points", 
                   ylab="Spatially Lag z-Non-Functional Water Points")
```

Above scatterplot is with standardized values, this shows the average value of its neighbours' non-functional water points.

### Preparing LISA map classes

The code chun below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI_wp))
```

Next, derives the spatially lagged variable of interest (i.e. Non-Functional water points) and centers the spatially lagged variable around its mean.

```{r}
nga_wp$lag_NF_wp <- lag.listw(wp_rswm_q, nga_wp$`wpt non-functional`)
DV_wp <- nga_wp$lag_NF_wp - mean(nga_wp$lag_NF_wp)   
```

This is follow by centering the local Moran's around the mean.

```{r}
LM_I_wp <- localMI_wp[,1] - mean(localMI_wp[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05   
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
quadrant[DV_wp <0 & LM_I_wp>0] <- 1
quadrant[DV_wp >0 & LM_I_wp<0] <- 2
quadrant[DV_wp <0 & LM_I_wp<0] <- 3  
quadrant[DV_wp >0 & LM_I_wp>0] <- 4  
```

Lastly, places non-significant Moran in the category 0.

```{r}
quadrant[localMI_wp[,5]>signif] <- 0
```

### Plotting LISA map

Now, we can build the LISA map by using the code chunks below.

```{r}
nga_wp.localMI_wp$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap_wp <- tm_shape(nga_wp.localMI_wp) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

LISAmap_wp
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
tmap_arrange(wp_nonfunctional, LISAmap_wp, 
             asp=1, ncol=2)
```

We can also include the local Moran's I map and p-value map as shown below for easy comparison.

```{r}
tmap_arrange(localMI_wp.map, pvalue_wp.map, asp=1, ncol=2)
```

Comparing the 4 graphs, in the *LISAmap_wp*, places with Local Moran's I p-values \< 0.05, it has shown colours, meaning there are spatial patterns of clusters and outliers. Similarly in the *LISAmap_wp*, clusters of non-functional water points (in red) are the areas in green in local Moran's I map. These presents that the computed index values are of statistical significance.

## Hot Spot and Cold Spot Area Analysis

Besides the above clusters and outliers found, it can also be used to detect hot spot and/or cold spot areas.

### Getis and Ord's G-Statistics

This section of analysis consists of the below three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi Statistics

### Deriving distance-based weight matrix

There are two types of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

#### Deriving the centroid

We need points to associate with each polygon before making the connectivity graph. From the below code chunk, we are able to get the values for longitudes, latitudes and finally combine them into the same object.

```{r}
longitude_wp <- map_dbl(nga_wp$geometry,~st_centroid(.x)[[1]])
latitude_wp <- map_dbl(nga_wp$geometry,~st_centroid(.x)[[2]])
coords_wp <- cbind(longitude_wp,latitude_wp)
```

#### Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1_wp <- knn2nb(knearneigh(coords_wp))
k1dists_wp <- unlist(nbdists(k1_wp,coords_wp, longlat = FALSE))
summary(k1dists_wp)
```

The summary report shows that the largest first nearest neighbour distance is 72139 m, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d72139 <- dnearneigh(coords_wp, 0, 72139, longlat = FALSE)
wm_d72139
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm72139_lw <- nb2listw(wm_d72139, style = 'B')
summary(wm72139_lw)
```

#### Computing adpative distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn_wp <- knn2nb(knearneigh(coords_wp, k=8))
knn_wp
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw_wp <- nb2listw(knn_wp, style = 'B')
summary(knn_lw_wp)
```

## Computing Gi statistics

### Gi Statistics using fixed distance

```{r}
gi.fixed_wp <- localG(nga_wp$`wpt non-functional`,wm72139_lw)
gi.fixed_wp
```

Next, we will join the Gi values to their corresponding Nigeria sf data frame by using the code chunk below.

```{r}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed_wp)) %>%
  rename(gstat_fixed_wp = as.matrix.gi.fixed_wp.)
```

The code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join *nga_wp* and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *nga_wp.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
Gimap_wp <-tm_shape(nga_wp.gi ) +
  tm_fill(col = "gstat_fixed_wp", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(wp_nonfunctional, Gimap_wp, 
             asp=1, ncol=2)
```

From the Gi Map above, we can see that the hot spot area (i.e area with high number of non-functional water points) are situated across a large areas in the middle of Nigeria. The worst situation in the east side of the country, followed by the mid section, vertically down the country experiencing high number of non-functional water points.

### Gi statistics using adaptive distance

```{r}
gi.adaptive_wp <- localG(nga_wp$`wpt non-functional`,knn_lw_wp)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive_wp)) %>%
  rename(gstat_adaptive_wp = as.matrix.gi.adaptive_wp.)
```

### Mapping Gi values with adaptive distance weights

```{r}
Gimap_wp <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive_wp", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(wp_nonfunctional, Gimap_wp, 
             asp=1, ncol=2)
```

Similar to the fixed distance weights Gi Map, the middle section of Nigeria also showing hot spot area across, however, some showing stronger Gi values. The adaptive distance weights Gi Map flagged several most severe areas in dark red to bring our attention to know that, resources in repairing the non-functional water points should be immediately brought to these locations.

## Conclusions

As stated in the start of this study, we want to visualize and understand the patterns of the non-functional water points in Nigeria. As mentioned in the Introduction, 60% of Nigerians do not have access to clean water.

Water Stress is a serious issue that can give rise to many other social and health problems. From an [article](https://www.newsecuritybeat.org/2017/08/water-stress-instability-violent-extremism-nigeria/) in News Security Beat (King & Spangler, 2017), there is a vicious cycle of weak governance and lack of proper water management. Weak governance causes poverty, lack of funds to fix and functional water points. These uneven distribution of clean water resources, causes a lot of violence and tensions in the society. Limited access to clean water also causes Nigerians especially their children to fall sick easily, accordingly to UNICEF.

In fact, Nigeria is one of the most water rich countries among other Africa countries, this [article](https://www.newsecuritybeat.org/2017/08/water-stress-instability-violent-extremism-nigeria/) entails how Nigeria government is unable to properly manage, use and protect their water resources for socioeconomic development and environmental. Many Non-governmental organizations (NGOs) have stepped in to help to monitor and improve the current situation.

### Why This Matters

Nigeria is also suffering from the climate change, coupled with limited fundings, the government should focus on repairing current substantial amount of non-functional water points (33% of total water points).

This study helps to visualize the clusters of non-functional water points by considering its geographical lags, weights and neighbours through various statistical packages in R. The visualizations could help Nigerian government or NGOs to easily identify the sub-districts with most serious water problems and allocate its resources in the most effective way.

This study ensures that the data is accurate and understandable for readers without much analytics or geographical experience so that organisations could easily take actions and to keep the readers in the loop.

### Future Impact/Suggestions

With continuing concerns over water issues in Nigeria, the poor has actually been hit the worst. Other than the water points data, we could also look into the population or GDP distributions across the countries, to check if the identified clusters of non-functional water points are aligned with the population characteristics.

We could also load newer data whenever there is an update to examine if there is constant and progressive improvements of clusters of non-functional water points over a period of time.

## Acknowledgements

This analysis has referred heavily to the Chapter 4 of the [learning resources](https://r4gdsa.netlify.app/chap04.html#cluster-and-outlier-analysis) prepared by Prof Kam Tin Seong as well as countless whatsapp messages from our lovely coursemates that have guided me to the right direction.
