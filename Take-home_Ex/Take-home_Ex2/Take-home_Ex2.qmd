---
title: "Take-home Exercise 2"
editor: visual
---

## Overview

## Getting Started

-   sf for importing and processing geospatial data,

-   tidyverse for importing and processing non-spatial data. In this exercise, readr package will be used for importing wkt data and dplyr package will be used to wrangling the data.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, funModeling)
```

## Data Import

In this study, two data sets will be used:

### Importing water point data

First, we are going to import the water point data into R environment.

```{r}
wp_nga <- read_csv("aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Thing to learn from the code chunk above:

-   The original file name is called *Water_Point_Data_Exchange\_-\_PlusWPdx.csv,* it has been rename to *WPdx.csv* for easy encoding.

-   Instead of using `read.csv()` of Base R to import the csv file into R, `read_csv()` is **readr** package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. *New Georeferenced Column*)

-   The data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, `filter()` of **dplyr** is used to extract out records belong to Nigeria only.

### Convert wkt data

After the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.

Notice that the newly imported tibble data frame (i.e.Â wp_nga) contains a field called *New Georeferenced Column* which represent spatial data in a textual format. In fact, this kind of text file is popularly known as **Well Known Text** in short **wkt**.

![](image1.jpg){fig-align="center"}

Two steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.

First, `st_as_sfc()` of sf package is used to derive a new field called *Geometry* as shown in the code chunk below.

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

If you open *wp_nga* data frame and scroll to the last field now, you will see a new field called *Geometry* has been added as shown below.

![](image2.jpg)

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326) 
```

When the process completed, a new sf data frame called *wp_sf* will be created.

![](image3.jpg)

### Importing Nigeria LGA level boundary data

For the purpose of this exercise, shapefile downloaded from [geoBoundaries](https://www.geoboundaries.org/) portal will be used.

```{r}
nga <- st_read(dsn = "geospatial",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326) %>%
  select(shapeName)
```

## Point in Polygon Overlay

Although wp_sf sf data frame consists of a field called #clean_adm2 which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

In this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called point-in-polygon overlay to transfer the attribute information in nga sf data frame into wp_sf data frame.

```{r}
wp_sf <- st_join(wp_sf, nga)
```

Notice that a new field called *shapeName* has been added into *wp_sf* sf data frame. as shown below.

![](image4.jpg)

## Data Wrangling

### EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of \#*status_clean & #water_tech_clean* field in *wp_sf*.

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```

```{r}
freq(data = wp_sf,
     input = '#water_tech_clean')
```

```{r}
summary(wp_sf$usage_capacity)
```

```{r}
freq(data = wp_sf,
     input = 'is_urban')
```

### Extracting Water Point Data

```{r}
wpt_functional <- wp_sf %>%
  filter(`#status_clean` %in%
           c('Functional',
              'Functional but not in use',
              'Functional but needs repair'))

wpt_nonfunctional <- wp_sf %>%
  filter(`#status_clean` %in%
           c('Non-Functional',
             'Non-Functional due to dry season',
             'Abandoned/Dcommissioned',
             'Abandoned',
             'Non functional due to dry season'))

wpt_handpump <- wp_sf %>%
  filter(`#water_tech_clean` %in%
           c('Hand Pump',
             'Hand Pump - India Mark III',
             'Hand Pump - India Mark II',
             'Hand Pump - Afridev',
             'Hand Pump - Rope Pump',
             'Hand Pump - Mono'))

wpt_usageless1000 <- wp_sf %>%
  filter(`usage_capacity` %in%
           0:999)

wpt_rural <- wp_sf %>%
  filter(is_urban %in%
           c('FALSE'))
```

### Performing Point-in Polygon Count

```{r}
st_crs(nga)
```

```{r}
st_crs(wp_sf)
```

```{r}
nga_derived <- nga %>%
  mutate('total wpt' = lengths(st_intersects(nga,wp_sf))) %>%
  mutate('functional wpt' = lengths(st_intersects(nga,wpt_functional))) %>%
  mutate('nonfunctional wpt' = lengths(st_intersects(nga,wpt_nonfunctional))) %>%
  mutate('handpump wpt' = lengths(st_intersects(nga,wpt_handpump))) %>%
  mutate('usageless1000 wpt' = lengths(st_intersects(nga,wpt_usageless1000))) %>%
  mutate('rural wpt' = lengths(st_intersects(nga,wpt_rural)))
```

### Saving the Analytical Data Table

```{r}

class(nga_derived$`functional wpt`)
```

```{r}
nga_derived <- nga_derived %>%
  mutate(`pct_functional` = `functional wpt`/`total wpt`) %>%
  mutate(`pct_nonfunctional` = `nonfunctional wpt`/`total wpt`) %>%
  mutate(`pct_handpump` = `handpump wpt`/`total wpt`) %>%
  mutate(`pct_usageless1000` = `usageless1000 wpt`/`total wpt`) %>%
  mutate(`pct_rural` = `rural wpt`/`total wpt`)
```

### Checking of duplicated shapeName

```{r}
duplicated_shapeName <- nga_derived$shapeName[nga_derived$shapeName %in% nga_derived$shapeName[duplicated(nga_derived$shapeName)]]

duplicated_shapeName
```

By using google map, we are able to retrieve the actual name and state of the areas. The table below shows the index and the actual name of the area.

| Index | Actual Shape Name |
|-------|-------------------|
| 94    | Bassa (Kogi)      |
| 95    | Bassa (Plateau)   |
| 304   | Ifelodun (Kwara)  |
| 305   | Ifelodun (Osun)   |
| 355   | Irepodun (Kwara)  |
| 356   | Irepodun (Osun)   |
| 518   | Nassarawa         |
| 546   | Obi (Benue)       |
| 547   | Obi (Nasarawa)    |
| 693   | Surulere (lagos)  |
| 694   | Surelere (Oyo)    |

We will access the individual index of the nga_derived data frame and change the value. Lastly, use the length() function to ensure there is no more duplicated shapeName.

```{r}
nga_derived$shapeName[c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa (Kogi)", "Bassa (Plateau)", "Ifelodun (Kwara)", "Ifelodun (Osun)", "Irepodun (Kwara)", "Iredpodun (Osun)", "Nassarawa", "Obi (Benue)", "Obi (Nasarawa)", "Surulere (Lagos)", "Surulere (Oyo)")

length((nga_derived$shapeName[nga_derived$shapeName %in% nga_derived$shapeName[duplicated((nga_derived$shapeName))]]))
```

## Exploratory Data Analysis

### EDA using statistical graphics

```{r}
Functionalwp <- ggplot(nga_derived, 
                  aes(x=`functional wpt`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

NonFunctionalwp <- ggplot(nga_derived, 
                  aes(x=`nonfunctional wpt`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

PctFunctionalwp <- ggplot(nga_derived, 
                  aes(x=`pct_functional`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

PctNonFunctionalwp <- ggplot(nga_derived, 
                  aes(x=`pct_nonfunctional`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

PctHandpump <- ggplot(nga_derived, 
                  aes(x=`pct_handpump`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

Pctusageless1000 <- ggplot(nga_derived, 
                  aes(x=`pct_usageless1000`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")

PctRural <- ggplot(nga_derived, 
                  aes(x=`pct_rural`)) +
       geom_histogram(bins=20, 
                      color="black", 
                      fill="light blue")
```

```{r}
ggarrange(Functionalwp, NonFunctionalwp, PctFunctionalwp, PctNonFunctionalwp,
          PctHandpump, Pctusageless1000, PctRural,
          ncol = 3, 
          nrow = 2)
```

### EDA using choropleth map

#### Preparing a choropleth map

```{r}
qtm(nga_derived,'functional wpt')
```

```{r}
TT_wp.map <- tm_shape(nga_derived)+
  tm_fill(col = "total wpt",
          n = 5,
          style = "jenks", 
          title = "Total Water Points") + 
  tm_borders(alpha = 0.5) 

Functionalwp.map <- tm_shape(nga_derived)+
    tm_fill(col = "functional wpt",
          n = 5,
          style = "jenks", 
          title = "Functional Water Points") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_wp.map, Functionalwp.map,
             asp=NA, ncol=2)
```

```{r}
tm_shape(nga_derived) +
    tm_polygons(c("total wpt", "functional wpt"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

## Correlation Analysis

In the code chunk below, `replace_na()` is used to recode all the *NA* values in pct fields into 0.

```{r}
nga_derived <- nga_derived %>%
  mutate(pct_functional = replace_na(pct_functional,0)) %>%
  mutate(pct_nonfunctional = replace_na(pct_nonfunctional,0)) %>%
  mutate(pct_handpump = replace_na(pct_handpump,0)) %>%
  mutate(pct_usageless1000 = replace_na(pct_usageless1000,0)) %>%
  mutate(pct_rural = replace_na(pct_rural,0))
```

Set Geometry to Null

```{r}
cluster_vars <- nga_derived %>%
  st_set_geometry(NULL) %>%
  select(`functional wpt`,`nonfunctional wpt`,pct_functional,pct_nonfunctional,
         pct_handpump,pct_usageless1000,pct_rural)
```

```{r}
cluster_vars.cor = cor(cluster_vars)
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlatioin plot above shows that pct_usageless1000 and pct_handpump are very strongly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.

## Hierarchy Cluster Analysis

In this section, we will perform hierarchical cluster analysis. The analysis consists of four major steps:

### Extracting clustering variables

Confirming the clustering variables using the code chunk below.

```{r}
cluster_vars <- nga_derived %>%
  st_set_geometry(NULL) %>%
  select('shapeName','functional wpt', 'nonfunctional wpt', 'pct_functional', 'pct_nonfunctional', 'pct_handpump', 'pct_rural')
head(cluster_vars,10)
```

Next, we need to change the rows by district name instead of row number by using the code chunk below

```{r}
row.names(cluster_vars) <- cluster_vars$'shapeName'
head(cluster_vars,10)
```

Then, we delete the shapeName field by using the code chunk below.

```{r}
cluster_vars <- select(cluster_vars, c(2:7))
head(cluster_vars, 10)
```

### Data Standardisation

In general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.

#### Min-Max standardisation

In the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.

```{r}
cluster_vars.std <- normalize(cluster_vars)
summary(cluster_vars.std)
```

Notice that the values range of the Min-max standardised clustering variables are 0-1 now.

#### Z-score standardisation

Z-score standardisation can be performed easily by using [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.

```{r}
cluster_vars.z <- scale(cluster_vars)
summary(cluster_vars.z)
```

Notice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.

Visualising the standardised clustering variables

```{r}
r <- ggplot(data=cluster_vars, 
             aes(x= `functional wpt`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=cluster_vars.std, 
       aes(x=`functional wpt`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

cluster_vars_z_df <- as.data.frame(cluster_vars.z)
z <- ggplot(data=cluster_vars_z_df, 
       aes(x=`functional wpt`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

```{r}
r <- ggplot(data=cluster_vars, 
             aes(x= `functional wpt`)) +
  geom_density(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=cluster_vars.std, 
       aes(x=`functional wpt`)) +
  geom_density(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

cluster_vars_z_df <- as.data.frame(cluster_vars.z)
z <- ggplot(data=cluster_vars_z_df, 
       aes(x=`functional wpt`)) +
  geom_density(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### Computing proximity matrix

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using [*dist()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of R.

*dist()* supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski**. The default is *euclidean* proximity matrix.

The code chunk below is used to compute the proximity matrix using *euclidean* method.

```{r}
proxmat <- dist(cluster_vars, method = 'euclidean')
```

The code chunk below can then be used to list the content of *proxmat* for visual inspection.

```{r}
proxmat
```

### Computing hierarchical clustering

In R, there are several packages provide hierarchical clustering function. In this hands-on exercise, [*hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of R stats will be used.

*hclust()* employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

We can then plot the tree by using *plot()* of R Graphics as shown in the code chunk below.

```{r}
plot(hclust_ward, cex = 0.6)
```

### Selecting the optimal clustering algorithm

One of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use [*agnes()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) function of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package. It functions like *hclus()*, however, with the *agnes()* function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(cluster_vars, method = x)$ac
}

map_dbl(m, ac)
```

With reference to the output above, we can see that Ward\'s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward\'s method will be used.

### Determining Optimal Clusters

Another technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.

There are [three](https://statweb.stanford.edu/~gwalther/gap) commonly used methods to determine the optimal clusters, they are:

-   [Elbow Method](https://en.wikipedia.org/wiki/Elbow_method_(clustering))

-   [Average Silhouette Method](https://www.sciencedirect.com/science/article/pii/0377042787901257?via%3Dihub)

-   [Gap Statistic Method](http://www.web.stanford.edu/~hastie/Papers/gap.pdf)

#### Gap Statistic Method

The [**gap statistic**](http://www.web.stanford.edu/~hastie/Papers/gap.pdf) compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

To compute the gap statistic, [*clusGap()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package will be used.

```{r}
set.seed(12345)
gap_stat <- clusGap(cluster_vars, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Also note that the [*hcut*](https://rpkgs.datanovia.com/factoextra/reference/hcut.html) function used is from [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

Next, we can visualise the plot by using [*fviz_gap_stat()*](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

```{r}
fviz_gap_stat(gap_stat)
```

With reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.

### Interpreting the dendrograms

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

It\'s also possible to draw the dendrogram with a border around the selected clusters by using [*rect.hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of R stats. The argument *border* is used to specify the border colors for the rectangles.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

In this section, we will learn how to perform visually-driven hiearchical clustering analysis by using [*heatmaply*](https://cran.r-project.org/web/packages/heatmaply/) package.

With **heatmaply**, we are able to build both highly interactive cluster heatmap or static cluster heatmap.

#### Transforming the data frame into a matrix

The data was loaded into a data frame, but it has to be a data matrix to make your heatmap.

The code chunk below will be used to transform *shan_ict* data frame into a data matrix.

```{r}
cluster_vars_mat <- data.matrix(cluster_vars)
```

#### Plotting interactive cluster heatmap using *heatmaply()* 

In the code chunk below, the [*heatmaply()*](https://talgalili.github.io/heatmaply/reference/heatmaply.html) of [heatmaply](https://talgalili.github.io/heatmaply/) package is used to build an interactive cluster heatmap.

```{r}
heatmaply(normalize(cluster_vars_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Nigeria Districts by Water Point Distributions",
          xlab = "Water Point indicators",
          ylab = "Districts of Nigeria"
          )
```

### Mapping the clusters formed

With closed examination of the dendragram above, we have decided to retain six clusters.

[*cutree()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cutree.html) of R Base will be used in the code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The output is called *groups*. It is a *list* object.

In order to visualise the clusters, the *groups* object need to be appended onto *nga_derived* simple feature object.

The code chunk below form the join in three steps:

-   the *groups* list object will be converted into a matrix;

-   *cbind()* is used to append *groups* matrix onto nga_derived to produce an output simple feature object called `nga_derived_cluster`; and

-   *rename* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*.

```{r}
nga_derived_cluster <- cbind(nga_derived, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Next, *qtm()* of **tmap** package is used to plot the choropleth map showing the cluster formed.

```{r}
qtm(nga_derived_cluster, "CLUSTER")
```

The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## Spatially Constrained Clustering: SKATER approach

In this section, we will derive spatially constrained cluster by using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) method of [**spdep**](https://r-spatial.github.io/spdep/) package.
