---
title: "Take-home Exercise 2"
editor: visual
---

## Overview

## Getting Started

-   sf for importing and processing geospatial data,

-   tidyverse for importing and processing non-spatial data. In this exercise, readr package will be used for importing wkt data and dplyr package will be used to wrangling the data.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, funModeling)
```

## Data Import

In this study, two data sets will be used:

### Importing water point data

First, we are going to import the water point data into R environment.

```{r}
wp_nga <- read_csv("aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Thing to learn from the code chunk above:

-   The original file name is called *Water_Point_Data_Exchange\_-\_PlusWPdx.csv,* it has been rename to *WPdx.csv* for easy encoding.

-   Instead of using `read.csv()` of Base R to import the csv file into R, `read_csv()` is **readr** package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. *New Georeferenced Column*)

-   The data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, `filter()` of **dplyr** is used to extract out records belong to Nigeria only.

### Convert wkt data

After the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.

Notice that the newly imported tibble data frame (i.e.Â wp_nga) contains a field called *New Georeferenced Column* which represent spatial data in a textual format. In fact, this kind of text file is popularly known as **Well Known Text** in short **wkt**.

![](image1.jpg){fig-align="center"}

Two steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.

First, `st_as_sfc()` of sf package is used to derive a new field called *Geometry* as shown in the code chunk below.

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

If you open *wp_nga* data frame and scroll to the last field now, you will see a new field called *Geometry* has been added as shown below.

![](image2.jpg)

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326) 
```

When the process completed, a new sf data frame called *wp_sf* will be created.

![](image3.jpg)

### Importing Nigeria LGA level boundary data

For the purpose of this exercise, shapefile downloaded from [geoBoundaries](https://www.geoboundaries.org/) portal will be used.

```{r}
nga <- st_read(dsn = "geospatial",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326) %>%
  select(shapeName)
```

## Point in Polygon Overlay

Although wp_sf sf data frame consists of a field called #clean_adm2 which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

In this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called point-in-polygon overlay to transfer the attribute information in nga sf data frame into wp_sf data frame.

```{r}
wp_sf <- st_join(wp_sf, nga)
```

Notice that a new field called *shapeName* has been added into *wp_sf* sf data frame. as shown below.

![](image4.jpg)

## Data Wrangling

### EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of \#*status_clean & #water_tech_clean* field in *wp_sf*.

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```

```{r}
freq(data = wp_sf,
     input = '#water_tech_clean')
```

```{r}
summary(wp_sf$usage_capacity)
```

```{r}
freq(data = wp_sf,
     input = 'is_urban')
```

### Extracting Water Point Data

```{r}
wpt_functional <- wp_sf %>%
  filter(`#status_clean` %in%
           c('Functional',
              'Functional but not in use',
              'Functional but needs repair'))

wpt_nonfunctional <- wp_sf %>%
  filter(`#status_clean` %in%
           c('Non-Functional',
             'Non-Functional due to dry season',
             'Abandoned/Dcommissioned',
             'Abandoned',
             'Non functional due to dry season'))

wpt_handpump <- wp_sf %>%
  filter(`#water_tech_clean` %in%
           c('Hand Pump',
             'Hand Pump - India Mark III',
             'Hand Pump - India Mark II',
             'Hand Pump - Afridev',
             'Hand Pump - Rope Pump',
             'Hand Pump - Mono'))

wpt_usageless1000 <- wp_sf %>%
  filter(`usage_capacity` %in%
           0:999)

wpt_rural <- wp_sf %>%
  filter(is_urban %in%
           c('FALSE'))
```

### Performing Point-in Polygon Count

```{r}
st_crs(nga)
```

```{r}
st_crs(wp_sf)
```

```{r}
nga_derived <- nga %>%
  mutate('total wpt' = lengths(st_intersects(nga,wp_sf))) %>%
  mutate('functional wpt' = lengths(st_intersects(nga,wpt_functional))) %>%
  mutate('nonfunctional wpt' = lengths(st_intersects(nga,wpt_nonfunctional))) %>%
  mutate('handpump wpt' = lengths(st_intersects(nga,wpt_handpump))) %>%
  mutate('usageless1000 wpt' = lengths(st_intersects(nga,wpt_usageless1000))) %>%
  mutate('rural wpt' = lengths(st_intersects(nga,wpt_rural)))
```

### Saving the Analytical Data Table

```{r}

class(nga_derived$`functional wpt`)
```

```{r}
nga_derived <- nga_derived %>%
  mutate(`pct_functional` = `functional wpt`/`total wpt`) %>%
  mutate(`pct_nonfunctional` = `nonfunctional wpt`/`total wpt`) %>%
  mutate(`pct_handpump` = `handpump wpt`/`total wpt`) %>%
  mutate(`pct_usageless1000` = `usageless1000 wpt`/`total wpt`) %>%
  mutate(`pct_rural` = `rural wpt`/`total wpt`)
```

## Exploratory Data Analysis

### EDA using statistical graphics

```{r}
ggplot(nga_derived, 
       aes(x=`functional wpt`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")


```
